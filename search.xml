<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024阅读进度</title>
    <url>/posts/319e992b/</url>
    <content><![CDATA[<h2 id="阅读记录"><a href="#阅读记录" class="headerlink" title="阅读记录"></a>阅读记录</h2><table>
<thead>
<tr>
<th>书名</th>
<th>封面</th>
<th>来源</th>
<th>阅读时间</th>
<th>结束时间</th>
<th>完成进度</th>
</tr>
</thead>
<tbody><tr>
<td><a class="link"   href="https://weread.qq.com/web/bookDetail/81132f5071cc7f7a81151c9" >《代码精进之路：从码农到工匠》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/book/代码精进之路_封面.jpg"
                      width="30%" height="30%"
                ></td>
<td>微信读书</td>
<td>2月份</td>
<td>2.26</td>
<td>&#10004;完成</td>
</tr>
<tr>
<td><a class="link"   href="https://weread.qq.com/web/reader/c3032820813ab8038g014ada" >《知行：技术人的管理之路》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/book/知行：技术人的管理之路.jpg"
                      width="30%" height="30%"
                ></td>
<td>微信读书</td>
<td>2月份</td>
<td>3.15</td>
<td>&#10004;完成</td>
</tr>
<tr>
<td><a class="link"   href="https://weread.qq.com/web/reader/d5532b10813ab6da3g0189c9" >《从程序员到架构师》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/book/从程序员到架构师.jpg"
                      width="30%" height="30%"
                ></td>
<td>微信读书</td>
<td>2月份</td>
<td></td>
<td>40%</td>
</tr>
<tr>
<td><a class="link"   href="https://weread.qq.com/web/bookDetail/2a6323005931bb2a6eec434" >《Maven实战》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/book/maven实战.jpg"
                      width="30%" height="30%"
                ></td>
<td>微信读书</td>
<td>3.20</td>
<td>4.4</td>
<td>&#10004;完成</td>
</tr>
<tr>
<td><a class="link"   href="https://weread.qq.com/web/bookDetail/091322d05cd5230913042e3" >《万历十五年》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/book/万历十五年.jpg"
                      width="30%" height="30%"
                ></td>
<td>微信读书</td>
<td>5.07</td>
<td>5.13</td>
<td>&#10004;完成</td>
</tr>
<tr>
<td><a class="link"   href="https://weread.qq.com/web/reader/3de32670813ab703eg013597" >《一句顶一万句》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/book/一句顶一万句.jpg"
                      width="30%" height="30%"
                ></td>
<td>微信读书</td>
<td>5.13</td>
<td>5.20</td>
<td>&#10004;完成</td>
</tr>
<tr>
<td><a class="link"   href="https://weread.qq.com/web/reader/18632780813ab8029g01593a#outline?noScroll=1" >《分布式系统架构》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/book/分布式系统架构.jpg"
                      width="30%" height="30%" 
                ></td>
<td>微信读书</td>
<td>9.12</td>
<td></td>
<td>16%</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Git提交规范</title>
    <url>/posts/d1a06c76/</url>
    <content><![CDATA[<h2 id="Git-提交规范"><a href="#Git-提交规范" class="headerlink" title="Git 提交规范"></a>Git 提交规范</h2><p>​	Git 提交消息应遵循一定的规范，以便于理解和维护。一种常用的规范是 Angular 规范，它要求提交消息包含三个部分：<strong>标题</strong>、<strong>主题</strong>和<strong>尾部</strong>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>type</strong>：提交类型，比如：feat(新功能)、fix(修复)、docs(文档变更)、style(格式变更)、refactor(重构)、chore(构建过程或辅助工具的变更) 等</li>
<li><strong>scope</strong>：变更影响的范围，比如模块名、组件名、禅道ID 等</li>
<li><strong>subject</strong>：简明描述，不超过 50 个字符，不要结束于句号</li>
<li><strong>body</strong>：详细描述此次提交的变更内容，可以包含多个段落</li>
<li><strong>footer</strong>：关闭的 issue 列表、break change 说明等</li>
</ul>
<p><strong>type 说明提交类型</strong>：只允许使用下面属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>feature | feat</td>
<td>新功能</td>
</tr>
<tr>
<td>fix</td>
<td>修复</td>
</tr>
<tr>
<td>docs</td>
<td>文档修改</td>
</tr>
<tr>
<td>style</td>
<td>格式修改</td>
</tr>
<tr>
<td>refactor</td>
<td>重构</td>
</tr>
<tr>
<td>perf</td>
<td>性能提升</td>
</tr>
<tr>
<td>test</td>
<td>测试</td>
</tr>
<tr>
<td>build</td>
<td>构建系统</td>
</tr>
<tr>
<td>ci</td>
<td>对 CI 配置文件修改</td>
</tr>
<tr>
<td>chore</td>
<td>修改构建流程、或者增加依赖库、工具</td>
</tr>
<tr>
<td>revert</td>
<td>回滚版本</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>DDD领域驱动（一）</title>
    <url>/posts/24adb6a4/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>ddd</tag>
        <tag>领域驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-单例模式</title>
    <url>/posts/545bbc59/</url>
    <content><![CDATA[<p>Java 中的<code>单例模式</code>是一种创建型设计模式，旨在确保一个类在整个应用程序的生命周期中只有一个实例。</p>
<p>在 Java 中，实现单例模式有多种方式，包括懒汉式、饿汉式、静态内部类、枚举和双重校验锁等。每种方式都有其优势和适用场景。</p>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><h3 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式: 静态成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在本类中创建本类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 提供一个公共的访问方式, 让外界获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>客户端测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断获取到的两个对象是否是同一个</span></span><br><span class="line">        System.out.println(instance == instance1);	<span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong>：</p>
<ul>
<li>缺点：浪费内存</li>
</ul>
<h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式: 静态代码块</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;存在问题: 浪费内存&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明 Singleton 类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在静态代码块中进行赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>客户端测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance == instance1);	<span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong>：</p>
<ul>
<li>缺点：浪费内存</li>
</ul>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><blockquote>
<p>枚举类型属于饿汉式模式</p>
</blockquote>
<p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所有单例实现中唯一一种不会被破坏的单例实现模式。其他方式都有可能被反射、序列化方式等破坏。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>客户端测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line"></span><br><span class="line">        System.out.println(instance == instance1);	<span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><h3 id="synchronized-方法加锁（线程安全）"><a href="#synchronized-方法加锁（线程安全）" class="headerlink" title="synchronized 方法加锁（线程安全）"></a>synchronized 方法加锁（线程安全）</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式: 线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明 Singleton 类型的变量 instance</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供访问方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断 instance 是否为 null, 如果为 null, 说明还没有创建 Singleton 类的对象</span></span><br><span class="line">        <span class="comment">// 如果没有, 创建一个并返回, 如果有, 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>客户端测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance == instance1);	<span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong>：</p>
<ul>
<li>缺点：synchronized 加在方法上，性能较差。</li>
</ul>
<h3 id="双重检查锁（线程安全）"><a href="#双重检查锁（线程安全）" class="headerlink" title="双重检查锁（线程安全）"></a>双重检查锁（线程安全）</h3><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是 JVM 在实例化对象的时候会进行优化和指令重排操作。要解决双重检查锁模式带来的空指针异常的问题，只需要使用 <code>volatile</code> 关键字，<code>volatile</code> 关键字可以保证可见性和有序性</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式: 双重检查锁(线程安全)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 第一次判断, 如果 instance 不为 null, 不进入抢锁阶段, 直接返回实例</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">// 抢到锁之后再次判断是否为 null</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>客户端测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance == instance1);	<span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="静态内部类（线程安全）"><a href="#静态内部类（线程安全）" class="headerlink" title="静态内部类（线程安全）"></a>静态内部类（线程安全）</h3><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中，是不会加载静态内部类的，只有内部类的属性&#x2F;方法被调用时才会被加载，并初始化其静态属性。静态属性由于被 static 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p>
<p>说明: 第一次加载 Singleton 类时不会去初始化 INSTANCE，只有第一次调用 getInstance，虚拟机加载 SingletonHolder 并初始化 INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式: 静态内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>客户端测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance == instance1);	<span class="comment">// 输出: true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Flume从kafka采集数据到另一个kafka</title>
    <url>/posts/8d409c77/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Flume 是 Apache 提供的一个高可用、高可靠、分布式的系统，用于<strong>有效地收集、聚合和移动大量日志数据到集中式数据存储</strong>。Flume 基于流式架构，灵活简单。它专为<strong>日志数据</strong>收集服务设计，但也适用于各种其他数据流场景。</p>
<h2 id="二、-前言"><a href="#二、-前言" class="headerlink" title="二、 前言"></a>二、 前言</h2><p>Flume 官网文档地址：<a class="link"   href="https://flume.apache.org/FlumeUserGuide.html" >https://flume.apache.org/FlumeUserGuide.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Flume Source 端采用 Kafka 官网文档地址：<a class="link"   href="https://flume.apache.org/FlumeUserGuide.html#kafka-source" >https://flume.apache.org/FlumeUserGuide.html#kafka-source <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Flume Sink 端采用 Kafka ：<a class="link"   href="https://flume.apache.org/FlumeUserGuide.html#flume-sinks" >https://flume.apache.org/FlumeUserGuide.html#flume-sinks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>下载地址：<a class="link"   href="https://flume.apache.org/download.html" >https://flume.apache.org/download.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>github 地址：<a class="link"   href="https://github.com/apache/logging-flume" >https://github.com/apache/logging-flume <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="三、Flume-架构图"><a href="#三、Flume-架构图" class="headerlink" title="三、Flume 架构图"></a>三、Flume 架构图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/flume/flume-architecture.png"
                     
                ></p>
<blockquote>
<ol>
<li><strong>Source</strong>：数据的来源。<strong>Source 负责接收或拉取数据进入 Flume 流。</strong>数据可以来自多种来源，如日志文件、网络服务等。</li>
<li><strong>Channel：用于在 Source 和 Sink 之间传递事件的缓冲区。</strong>Channel 保证了数据的可靠性，即使在传输过程中遇到系统故障，数据也不会丢失。</li>
<li><strong>Sink</strong>：数据的目的地。<strong>Sink 负责将从 Channel 接收到的数据写入到外部存储系统或数据处理平台</strong>，如 HDFS、ElasticSearch 或 Kafka。</li>
</ol>
</blockquote>
<h3 id="3-1-架构组件"><a href="#3-1-架构组件" class="headerlink" title="3.1 架构组件"></a>3.1 架构组件</h3><h4 id="3-1-1-Agent"><a href="#3-1-1-Agent" class="headerlink" title="3.1.1 Agent"></a>3.1.1 Agent</h4><p>​	Agent 是一个 JVM 进程，它以事件的形式将数据从源头送至目的，是 Flume 数据传输的基本单元。</p>
<p>​	Agent 主要有 3 个部分组成，<strong>Source</strong>、<strong>Channel</strong>、<strong>Sink</strong>。</p>
<h4 id="3-1-2-Source"><a href="#3-1-2-Source" class="headerlink" title="3.1.2 Source"></a>3.1.2 Source</h4><p>​	Source 是负责接收数据到 Flume Agent 的组件。Source 组件可以处理各种类型、各种格式的日志数据，包括 avro、thrift、exec、jms、spooling directory、taildir、twitter、kafka、netcat、sequence generator、syslog、http、legacy 等。</p>
<h4 id="3-1-3-Channel"><a href="#3-1-3-Channel" class="headerlink" title="3.1.3 Channel"></a>3.1.3 Channel</h4><p>​	Channel 是位于 Source 和 Sink 之间的缓冲区。因此，Channel 允许 Source 和 Sink 运行在不同的速率上。<strong>Channel 是线程安全的</strong>，可以同时处理几个 Source 的写入操作和几个 Sink 的读取操作。</p>
<p>​	Channel 支持的类型包括：</p>
<ul>
<li>Memory：事件存储到内存中。</li>
<li>JDBC：事件存储到数据库中。</li>
<li>Kafka：事件存储到 Kafka 中</li>
<li>File：事件写入到磁盘中。</li>
<li>Custom：事件写入到自定义中。</li>
</ul>
<h4 id="3-1-4-Sink"><a href="#3-1-4-Sink" class="headerlink" title="3.1.4 Sink"></a>3.1.4 Sink</h4><p>​	Sink 不断地轮询 Channel 中的事件且批量地移除它们，并将这些事件批量写入到存储（HDFS、Kakfa等）系统、或者发送到另一个 Flume Agent。</p>
<p>​	Sink 是完全事务性的。在从 Channel 批量删除数据之前，每个 Sink 用 Channel 启动一个事务。批量事件一旦成功写出到存储系统或下一个 Flume Agent，Sink 就利用 Channel 提交事务。事务一旦被提交，该 Channel 从自己的内部缓冲区删除事件。</p>
<p>​	Sink 组件目的地包括：</p>
<ul>
<li>HDFS</li>
<li>Hive</li>
<li>Logger</li>
<li>Avro</li>
<li>Thrift</li>
<li>IRC</li>
<li>File Roll</li>
<li>Null</li>
<li>HBase</li>
<li>Kafka</li>
<li>Http</li>
<li>Custom：自定义</li>
</ul>
<h4 id="3-1-5-Event"><a href="#3-1-5-Event" class="headerlink" title="3.1.5 Event"></a>3.1.5 Event</h4><p>​	传输单元，Flume 数据传输的基本单元，以事件的形式将数据从源头送至目的地。</p>
<p>​	Event 由<code>Header</code>和<code>Body</code>两部分组成，Header 用来存放该 event 的一些属性，为 K-V 结构，Body 用来存放该条数据，形式为字节数组。</p>
<h5 id="设计原因"><a href="#设计原因" class="headerlink" title="设计原因"></a>设计原因</h5><blockquote>
<ol>
<li><strong>灵活性</strong>：<code>header</code>是一个键值对集合(Map)，<strong>允许在事件中附加元数据</strong>，如时间戳、源标识、类型等。这种设计提供了极大的灵活性，使得在整个数据流传输过程中，可以根据需要动态添加、读取和修改事件的元信息。</li>
<li><strong>兼容性</strong>：<code>Body</code>是一个字节数组(byte array)，<strong>可以存储任何形式的数据</strong>，无论是文本、二进制文件还是序列化对象。这意味着 Flume 可以处理各种数据类型，不受内容格式的限制，保证了与各种数据源和目的地的兼容性。</li>
<li><strong>高效性</strong>：使用字节数组作为<code>Body</code>的存储格式，可以高效地在网络中传输数据，同时也便于存储和处理。由于字节数组在 Java 中也是一种基础且高效的数据结构，它适合用来表示未加工的数据流。</li>
</ol>
</blockquote>
<h5 id="Body-大小限制"><a href="#Body-大小限制" class="headerlink" title="Body 大小限制"></a>Body 大小限制</h5><p><code>Event</code>的<code>Body</code>大小本身在 Flume 的设计中没有硬性限制，但实际上，由于内存和网络带宽的限制，以及目的地系统（如 Kafka）可能对消息大小有自己的限制，通常需要根据具体的使用场景来确定一个合理的大小。例如，Kafka 默认的最大消息是 1MB，尽管这个值是可以配置的。</p>
<h5 id="源码角度"><a href="#源码角度" class="headerlink" title="源码角度"></a>源码角度</h5><p>从源码角度看，<code>Event</code>的定义体现了其简洁且高效的设计理念。下面是<code>Event</code>接口的源代码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.flume;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; <span class="title function_">getHeaders</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setHeaders</span><span class="params">(Map&lt;String, String&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] getBody();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBody</span><span class="params">(<span class="type">byte</span>[] var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个接口中，<code>getHeaders</code>和<code>setHeaders</code>方法用于操作事件的元数据，而<code>getBody</code>和<code>setBody</code>方法则用于获取和设置事件的主体数据。这种设计使得 Flume 能够灵活地处理各种数据类型和格式，同时保持高效的数据处理和传输能力。</p>
<h2 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h2><ol>
<li><p>将 apache-flume-1.11.0-bin.tar.gz 上传到 linux 的 &#x2F;usr&#x2F;local 目录下</p>
</li>
<li><p>解压 apache-flume-1.11.0-bin.tar.gz 到 &#x2F;usr&#x2F;local&#x2F; 目录下</p>
<blockquote>
<p>tar -zxf apache-flume-1.11.0-bin.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</p>
</blockquote>
</li>
<li><p>修改 apache-flume-1.11.0-bin 文件夹名称为 flume</p>
<blockquote>
<p>mv apache-flume-1.11.0-bin flume</p>
</blockquote>
</li>
<li><p>将 flume&#x2F;conf 下的 flume-env.sh.template 文件修改为 flume-env.sh，并配置 flume-env.sh 文件</p>
<blockquote>
<p>mv flume-env.sh.template flume-env.sh</p>
<p>vi flume-env.sh</p>
<p>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_144</p>
</blockquote>
</li>
</ol>
<h2 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h2><h3 id="5-1-Kafka-Memory-Kafka"><a href="#5-1-Kafka-Memory-Kafka" class="headerlink" title="5.1 Kafka -&gt; Memory -&gt; Kafka"></a>5.1 Kafka -&gt; Memory -&gt; Kafka</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi kafka-memory-kafka.conf</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义 agent、source、channel、sink 名称，并绑定关系</span></span><br><span class="line"><span class="attr">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="attr">a1.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="attr">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># source </span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = <span class="string">org.apache.flume.source.kafka.KafkaSource</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="attr">a1.sources.r1.batchSize</span> = <span class="string">3</span></span><br><span class="line"><span class="attr">a1.sources.r1.batchDurationMillis</span> = <span class="string">2000</span></span><br><span class="line"><span class="comment"># kafka 服务地址</span></span><br><span class="line"><span class="attr">a1.sources.r1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.25:9092</span></span><br><span class="line"><span class="comment"># topic 名称</span></span><br><span class="line"><span class="attr">a1.sources.r1.kafka.topics</span> = <span class="string">flume-source-kafka2</span></span><br><span class="line"><span class="comment"># 拦截器</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors</span> = <span class="string">i1 i2</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.type</span> = <span class="string">static</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.key</span> = <span class="string">topic</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.preserveExisting</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"># sink 端 topic 名称</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.value</span> = <span class="string">flume-collect-kafka2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = <span class="string">org.apache.flume.sink.kafka.KafkaSink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.flumeBatchSize</span> = <span class="string">3</span></span><br><span class="line"><span class="comment"># kafka 服务地址</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.191:9092</span></span><br><span class="line"><span class="comment"># topic 名称</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.topic</span> = <span class="string">flume-collect-kafka2</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.acks</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.linger.ms</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.compression.type</span> = <span class="string">snappy</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># channel</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = <span class="string">memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="string">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.keep-alive</span> = <span class="string">10</span></span><br></pre></td></tr></table></figure></div>

<p>启动命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">nohup /usr/local/flume/bin/flume-ng agent \</span><br><span class="line">-n a1 \</span><br><span class="line">-c /usr/local/flume/conf/ \</span><br><span class="line">-f /usr/local/flume/conf/kafka-memory-kafka.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/usr/local/flume/conf/kafka-memory-kafka.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="5-2-Kafka-Kafka-Kafka"><a href="#5-2-Kafka-Kafka-Kafka" class="headerlink" title="5.2 Kafka -&gt; Kafka -&gt; Kafka"></a>5.2 Kafka -&gt; Kafka -&gt; Kafka</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi kafka-kafka-kafka.conf</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义 agent、source、channel、sink 名称，并绑定关系</span></span><br><span class="line"><span class="attr">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="attr">a1.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="attr">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = <span class="string">org.apache.flume.source.kafka.KafkaSource</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="attr">a1.sources.r1.batchSize</span> = <span class="string">3</span></span><br><span class="line"><span class="attr">a1.sources.r1.batchDurationMillis</span> = <span class="string">2000</span></span><br><span class="line"><span class="comment"># Kafka 服务地址</span></span><br><span class="line"><span class="attr">a1.sources.r1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.25:9092</span></span><br><span class="line"><span class="comment"># topic 名称</span></span><br><span class="line"><span class="attr">a1.sources.r1.kafka.topics</span> = <span class="string">flume-source-kafka</span></span><br><span class="line"><span class="comment"># i1 i2 为拦截器，拦截器执行顺序根据配置顺序执行</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors</span> = <span class="string">i1 i2</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.type</span> = <span class="string">static</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.key</span> = <span class="string">topic</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.preserveExisting</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"># sink 端 topic 名称</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.value</span> = <span class="string">flume-collect-kafka</span></span><br><span class="line"><span class="comment"># 自定义拦截器插件</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i2.type</span> = <span class="string">com.bda.dcp.flume.interceptor.JsonInterceptor$Builder</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i2.keyword</span>=<span class="string">hello, fly</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = <span class="string">org.apache.flume.sink.kafka.KafkaSink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.flumeBatchSize</span> = <span class="string">3</span></span><br><span class="line"><span class="comment"># kafka 服务地址</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.191:9092</span></span><br><span class="line"><span class="comment"># topic 名称</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.topic</span> = <span class="string">flume-collect-kafka</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.acks</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.linger.ms</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.compression.type</span> = <span class="string">snappy</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># channel</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = <span class="string">org.apache.flume.channel.kafka.KafkaChannel</span></span><br><span class="line"><span class="comment"># kafka 服务地址</span></span><br><span class="line"><span class="attr">a1.channels.c1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.25:9092</span></span><br><span class="line"><span class="comment"># topic 名称</span></span><br><span class="line"><span class="attr">a1.channels.c1.kafka.topic</span> = <span class="string">flume-channel</span></span><br><span class="line"><span class="attr">a1.channels.c1.kafka.consumer.auto.offset.reset</span> = <span class="string">latest</span></span><br></pre></td></tr></table></figure></div>

<p>启动命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">nohup /usr/local/flume/bin/flume-ng agent \</span><br><span class="line">-n a1 \</span><br><span class="line">-c /usr/local/flume/conf/ \</span><br><span class="line">-f /usr/local/flume/conf/kafka-kafka-kafka.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/usr/local/flume/conf/kafka-kafka-kafka.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>flume</category>
      </categories>
      <tags>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>Flume自定义过滤器插件</title>
    <url>/posts/3e52edfc/</url>
    <content><![CDATA[<p>Flume 是一种可扩展的、可靠的分布式日志收集和聚合系统。它使用了拦截器来对数据流进行处理和过滤，以满足不同的需求。Flume 提供了很多内置的拦截器，但我们也可以通过自定义拦截器来实现自定义的数据过滤和处理。</p>
<h2 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h2><p>新建一个工程，引入如下依赖：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.flume&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flume-ng-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.11</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、自定义拦截器类"><a href="#二、自定义拦截器类" class="headerlink" title="二、自定义拦截器类"></a>二、自定义拦截器类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bda.dcp.flume.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Splitter;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.utils.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Event;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.interceptor.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by fengxuguang on 2024/6/14 15:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String jsonTopic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonInterceptor</span><span class="params">(String jsonTopic)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jsonTopic = jsonTopic;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; keyword = &quot;</span> + jsonTopic);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Event <span class="title function_">intercept</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(event.getBody());</span><br><span class="line"></span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            Map&lt;String, String&gt; bodyJson = gson.fromJson(body, Map.class);</span><br><span class="line">            log.info(<span class="string">&quot;=====&gt; body json: &#123;&#125;&quot;</span>, bodyJson);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据逗号分割配置的字符串，转换成 List&lt;String&gt; 集合</span></span><br><span class="line">            List&lt;String&gt; columns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(jsonTopic)) &#123;</span><br><span class="line">                Iterable&lt;String&gt; split = Splitter.on(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">                        .omitEmptyStrings()</span><br><span class="line">                        .trimResults()</span><br><span class="line">                        .split(jsonTopic);</span><br><span class="line">                split.forEach(s -&gt; columns.add(s));</span><br><span class="line">            &#125;</span><br><span class="line">            Map&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String key : bodyJson.keySet()) &#123;</span><br><span class="line">                <span class="comment">// 过滤出事件 body 内的数据在配置项中指定的字段</span></span><br><span class="line">                <span class="keyword">if</span> (columns.contains(key)) &#123;</span><br><span class="line">                    result.put(key, bodyJson.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            event.setBody(gson.toJson(result).getBytes());</span><br><span class="line">            <span class="keyword">return</span> event;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Event&gt; <span class="title function_">intercept</span><span class="params">(List&lt;Event&gt; list)</span> &#123;</span><br><span class="line">        List&lt;Event&gt; resultList = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (Event event : list) &#123;</span><br><span class="line">            <span class="type">Event</span> <span class="variable">result</span> <span class="operator">=</span> intercept(event);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultList.add(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span>.Builder &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String jsonTopic;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Interceptor <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonInterceptor</span>(jsonTopic);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">            jsonTopic = context.getString(<span class="string">&quot;jsonTopic&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="三、打包"><a href="#三、打包" class="headerlink" title="三、打包"></a>三、打包</h2><p>mvn package 打包成 jar 包后放入 flume&#x2F;lib&#x2F; 目录</p>
<h2 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h2><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="attr">a1.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="attr">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = <span class="string">org.apache.flume.source.kafka.KafkaSource</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="attr">a1.sources.r1.batchSize</span> = <span class="string">3</span></span><br><span class="line"><span class="attr">a1.sources.r1.batchDurationMillis</span> = <span class="string">2000</span></span><br><span class="line"><span class="attr">a1.sources.r1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.25:9092</span></span><br><span class="line"><span class="attr">a1.sources.r1.kafka.topics</span> = <span class="string">flume-source-kafka</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors</span> = <span class="string">i1 i2</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.type</span> = <span class="string">static</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.key</span> = <span class="string">topic</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.preserveExisting</span> = <span class="string">false</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i1.value</span> = <span class="string">flume-collect-kafka</span></span><br><span class="line"><span class="comment"># 配置自定义拦截器，类型必须是: 类全名$内部类名</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i2.type</span> = <span class="string">com.bda.dcp.flume.interceptor.JsonInterceptor$Builder</span></span><br><span class="line"><span class="comment"># 配置要过滤的字段</span></span><br><span class="line"><span class="attr">a1.sources.r1.interceptors.i2.jsonTopic</span>=<span class="string">name,age</span></span><br><span class="line"></span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = <span class="string">org.apache.flume.sink.kafka.KafkaSink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.flumeBatchSize</span> = <span class="string">3</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.191:9092</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.topic</span> = <span class="string">flume-collect-kafka</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.acks</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.linger.ms</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.kafka.producer.compression.type</span> = <span class="string">snappy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = <span class="string">org.apache.flume.channel.kafka.KafkaChannel</span></span><br><span class="line"><span class="attr">a1.channels.c1.kafka.bootstrap.servers</span> = <span class="string">192.162.11.25:9092</span></span><br><span class="line"><span class="attr">a1.channels.c1.kafka.topic</span> = <span class="string">flume-channel</span></span><br><span class="line"><span class="attr">a1.channels.c1.kafka.consumer.auto.offset.reset</span> = <span class="string">latest</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>flume</category>
      </categories>
      <tags>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器命令</title>
    <url>/posts/35ae3709/</url>
    <content><![CDATA[<h2 id="Docker-容器命令"><a href="#Docker-容器命令" class="headerlink" title="Docker 容器命令"></a>Docker 容器命令</h2><h3 id="1-启动-Docker"><a href="#1-启动-Docker" class="headerlink" title="1. 启动 Docker"></a>1. 启动 Docker</h3><p>要启动一个已经存在的容器，可以使用 <strong>start</strong> 命令。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker start [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<p>Docker start 命令本质为容器文件系统创建了一个进程隔离空间。</p>
<h3 id="2-停止容器"><a href="#2-停止容器" class="headerlink" title="2. 停止容器"></a>2. 停止容器</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<h3 id="3-运行容器"><a href="#3-运行容器" class="headerlink" title="3. 运行容器"></a>3. 运行容器</h3><p>要创建和运行容器使用 <strong>run</strong> 命令。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [-d] [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<p>该命令会从本地、Docker Hub 中搜索指定的镜像，并下载到本地，创建一个容器并启动该容器。</p>
<p>选项：</p>
<ul>
<li>-d：为可选项，表示以后台方式启动。</li>
</ul>
<h3 id="4-查看所有运行中的容器"><a href="#4-查看所有运行中的容器" class="headerlink" title="4. 查看所有运行中的容器"></a>4. 查看所有运行中的容器</h3><p>列出所有运行中的容器。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></div>

<p>列出所有的容器，不管是运行的，还是停止的。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></div>

<h3 id="5-重启容器"><a href="#5-重启容器" class="headerlink" title="5. 重启容器"></a>5. 重启容器</h3><p>要重启一个运行中的容器。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<h3 id="6-查看容器日志"><a href="#6-查看容器日志" class="headerlink" title="6. 查看容器日志"></a>6. 查看容器日志</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker log -f [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<p>选项：</p>
<ul>
<li>-f：可选，滚动刷新日志信息。</li>
</ul>
<h3 id="7-进入容器"><a href="#7-进入容器" class="headerlink" title="7. 进入容器"></a>7. 进入容器</h3><p>容器启动后，要进入容器内部。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器名/containerID] /bin/[bash | sh]</span><br></pre></td></tr></table></figure></div>

<h3 id="8-查看-Docker-信息"><a href="#8-查看-Docker-信息" class="headerlink" title="8. 查看 Docker 信息"></a>8. 查看 Docker 信息</h3><p>查看 Docker 版本。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></div>

<p>如：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           24.0.2</span><br><span class="line"> API version:       1.43</span><br><span class="line"> Go version:        go1.20.4</span><br><span class="line"> Git commit:        cb74dfc</span><br><span class="line"> Built:             Thu May 25 21:55:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          24.0.2</span><br><span class="line">  API version:      1.43 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.20.4</span><br><span class="line">  Git commit:       659604f</span><br><span class="line">  Built:            Thu May 25 21:54:24 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.25</span><br><span class="line">  GitCommit:        d8f198a4ed8892c764191ef7b3b06d8a2eeb5c7f</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.10</span><br><span class="line">  GitCommit:        v1.1.10-0-g18a0cb0</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure></div>

<h3 id="9-查看-docker-系统的信息"><a href="#9-查看-docker-系统的信息" class="headerlink" title="9. 查看 docker 系统的信息"></a>9. 查看 docker 系统的信息</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></div>

<p>如：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># docker info</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:    24.0.2</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  buildx: Docker Buildx (Docker Inc.)</span><br><span class="line">    Version:  v0.11.2</span><br><span class="line">    Path:     /usr/libexec/docker/cli-plugins/docker-buildx</span><br><span class="line">  compose: Docker Compose (Docker Inc.)</span><br><span class="line">    Version:  v2.21.0</span><br><span class="line">    Path:     /usr/libexec/docker/cli-plugins/docker-compose</span><br><span class="line">  scan: Docker Scan (Docker Inc.)</span><br><span class="line">    Version:  v0.23.0</span><br><span class="line">    Path:     /usr/libexec/docker/cli-plugins/docker-scan</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 19</span><br><span class="line">  Running: 16</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 3</span><br><span class="line"> Images: 85</span><br><span class="line"> Server Version: 24.0.2</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: xfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Using metacopy: <span class="literal">false</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">  userxattr: <span class="literal">false</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk </span><br><span class="line">... 省略</span><br></pre></td></tr></table></figure></div>

<h2 id="Docker-镜像命令"><a href="#Docker-镜像命令" class="headerlink" title="Docker 镜像命令"></a>Docker 镜像命令</h2><p>镜像是 Docker 容器的基石，容器是镜像的运行实例，有了镜像才能启动容器。</p>
<h3 id="1-列出所有镜像"><a href="#1-列出所有镜像" class="headerlink" title="1. 列出所有镜像"></a>1. 列出所有镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">[root@192 docker]# docker images</span><br><span class="line">REPOSITORY      TAG      IMAGE ID       CREATED         SIZE</span><br></pre></td></tr></table></figure></div>

<p>选项说明：</p>
<ul>
<li>REPOSITORY：表示镜像的仓库源</li>
<li>TAG：镜像的标签版本号</li>
<li>IMAGE ID：镜像ID</li>
<li>CREATED：镜像创建时间</li>
<li>SIZE：镜像大小</li>
</ul>
<h3 id="2-获取镜像"><a href="#2-获取镜像" class="headerlink" title="2. 获取镜像"></a>2. 获取镜像</h3><p>拉取 Docker 仓库中该镜像的最新版本。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker images pull [镜像名[:TAG]]</span><br></pre></td></tr></table></figure></div>

<p>如果不显示地指定 TAG，则默认会选择 latest 标签，即下载仓库中最新版本的镜像。</p>
<h3 id="3-搜索镜像"><a href="#3-搜索镜像" class="headerlink" title="3. 搜索镜像"></a>3. 搜索镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker search [镜像名]</span><br></pre></td></tr></table></figure></div>

<p>选项：</p>
<ul>
<li>–automated&#x3D;false，仅显示自动创建的镜像</li>
<li>–on-trunc&#x3D;false，输出信息不截断显示</li>
<li>-s, –stars&#x3D;0，指定仅显示评价为指定星级以上的镜像。</li>
</ul>
<p>Docker Hub 官方地址：<a class="link"   href="https://hub.docker.com/" >Docker Hub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="4-运行镜像"><a href="#4-运行镜像" class="headerlink" title="4. 运行镜像"></a>4. 运行镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [镜像名]</span><br></pre></td></tr></table></figure></div>

<h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5. 删除镜像"></a>5. 删除镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一个镜像</span></span><br><span class="line">docker rmi [镜像名/镜像ID]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多个，镜像ID或镜像名用`空格`隔开即可</span></span><br><span class="line">docker rmi 镜像名/镜像ID 镜像名/镜像ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除全部镜像，-a：显示全部，-q：只显示ID</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure></div>

<p>参数：</p>
<ul>
<li>-f：强制删除</li>
</ul>
<h2 id="Docker-运维命令"><a href="#Docker-运维命令" class="headerlink" title="Docker 运维命令"></a>Docker 运维命令</h2><h3 id="1-启动-Docker-1"><a href="#1-启动-Docker-1" class="headerlink" title="1. 启动 Docker"></a>1. 启动 Docker</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<h3 id="2-docker-开机自启"><a href="#2-docker-开机自启" class="headerlink" title="2. docker 开机自启"></a>2. docker 开机自启</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure></div>

<h3 id="3-查看-docker-运行状态"><a href="#3-查看-docker-运行状态" class="headerlink" title="3. 查看 docker 运行状态"></a>3. 查看 docker 运行状态</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></div>

<h3 id="4-查看-docker-日志"><a href="#4-查看-docker-日志" class="headerlink" title="4. 查看 docker 日志"></a>4. 查看 docker 日志</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -u docker.service</span><br><span class="line">或者</span><br><span class="line">less /var/log/messages | grep Docker</span><br></pre></td></tr></table></figure></div>

<h3 id="5-docker-监控相关"><a href="#5-docker-监控相关" class="headerlink" title="5. docker 监控相关"></a>5. docker 监控相关</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器的资源使用率</span></span><br><span class="line">docker stats container_ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">限制 cpu 和内存资源</span></span><br><span class="line">docker run --cpus=1 -m=2g --name nginx -d nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘大小</span> </span><br><span class="line">docker system df</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看每个 image、container 详细大小</span></span><br><span class="line">docker system df -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 <span class="built_in">dir</span> 路径</span></span><br><span class="line">docker info | grep -i dir</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-工厂模式</title>
    <url>/posts/f1432f14/</url>
    <content><![CDATA[<p><code>工厂模式</code>是一种创建型设计模式，它旨在封装对象的创建过程，从而降低程序模块之间的耦合度。在 Java 中，工厂模式可以通过简单工厂模式、工厂方法模式和抽象工厂模式来实现。</p>
<p>场景：假设咖啡店里现只售<code>美式咖啡</code>和<code>拿铁咖啡</code>两种，顾客点餐时根据选择不同的咖啡，咖啡店制作对应的咖啡。</p>
<h2 id="未使用工厂模式前"><a href="#未使用工厂模式前" class="headerlink" title="未使用工厂模式前"></a>未使用工厂模式前</h2><p>代码设计如下：</p>
<p>定义<code>咖啡抽象类</code>，Coffee</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加糖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addsugar</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加奶</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMilk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义<code>美式咖啡</code>类 AmericanCoffee，继承 Coffee 抽象类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanCoffee</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;美式咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义<code>拿铁咖啡</code>类 LatteCoffee，继承 Coffee 抽象类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LatteCoffee</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义咖啡店类 CoffeeStore</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">orderCoffee</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明 Coffee 类型的变量, 根据不同类型创建不同的 coffee 子类对象</span></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;american&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;对不起，您所点的咖啡没有&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加配料</span></span><br><span class="line">        coffee.addsugar();</span><br><span class="line">        coffee.addMilk();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义客户端类 Client，模拟顾客下单</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建咖啡店</span></span><br><span class="line">        <span class="type">CoffeeStore</span> <span class="variable">store</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeStore</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 点咖啡</span></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> store.orderCoffee(<span class="string">&quot;american&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coffee.getName());</span><br><span class="line">        <span class="comment">// 输出: 加糖</span></span><br><span class="line">        <span class="comment">// 加奶</span></span><br><span class="line">        <span class="comment">// 美式咖啡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>存在问题：未使用设计模式之前，咖啡店生产咖啡需要根据客户端传进来的值进行生产对应的咖啡，当咖啡店需要推出新品种时，需在 CoffeeStore 类进行代码改动，违反了<code>开闭原则</code>，这种设计代码扩展性不好。</p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><strong>定义</strong>：提供一个工厂类，根据传入的参数不同返回不同的实例，被创建的实例具有共同的父类或接口。</p>
<p><strong>适用场景</strong>：当需要创建的对象较少，且客户端不关心对象的创建过程。</p>
<p><strong>简单工厂包含如下角色</strong>：</p>
<ol>
<li>抽象产品：定义了产品的规范，描述了产品的主要特性和功能。</li>
<li>具体产品：实现或继承抽象产品的子类。</li>
<li>具体工厂：提供了创建产品的方法，调用者通过该方法来获取产品。</li>
</ol>
<p>类 Coffee、AmericanCoffee、LatteCoffee 代码不变，具体可看上面示例。</p>
<p>定义<code>简单工厂类</code> SimpleCoffeeFactory</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleCoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明 Coffee 类型的变量, 根据不同类型创建不同的 coffee 子类对象</span></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;american&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;对不起，您所点的咖啡没有&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>工厂类中的创建 Coffee 的代码从原有 CoffeeStore 类中抽取出来，由工厂类进行创建 Coffee。</p>
<p>咖啡店类 CoffeeStore 代码调整如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">orderCoffee</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">SimpleCoffeeFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCoffeeFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> factory.createCoffee(type);</span><br><span class="line"></span><br><span class="line">        coffee.addsugar();</span><br><span class="line">        coffee.addMilk();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>此时，咖啡店只需要调用<code>简单工厂类</code>传入对应的咖啡 type 就能获取到对应的咖啡实例，具体怎么创建咖啡就不用在这个类进行处理。</p>
<p>定义客户端类 Client，模拟客户下单</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建咖啡店类对象</span></span><br><span class="line">        <span class="type">CoffeeStore</span> <span class="variable">coffeeStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeStore</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> coffeeStore.orderCoffee(<span class="string">&quot;latte&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coffee.getName());</span><br><span class="line">        <span class="comment">// 输出: 加糖</span></span><br><span class="line">        <span class="comment">// 加奶</span></span><br><span class="line">        <span class="comment">// 拿铁咖啡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong></p>
<p>优点：</p>
<ul>
<li>封装了创建对象的过程，可以通过参数直接获取对象，把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新的产品，直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容器扩展。</li>
</ul>
<p>缺点：</p>
<ul>
<li>增加新产品时还是需要修改工厂类的代码，违背了<code>开闭原则</code>。</li>
</ul>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>定义</strong>：定义一个工厂接口和多个具体工厂类来实现对象的创建，客户端通过工厂接口来创建产品对象。</p>
<p><strong>适用场景</strong>：当需要创建的对象较多，且每个对象都有不同的创建过程时。</p>
<p><strong>工厂方法结构</strong>：</p>
<ol>
<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li>
<li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>
<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li>
<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>
</ol>
<p>类 Coffee、AmericanCoffee、LatteCoffee 代码不变，具体可看上面示例。</p>
<p>定义抽象工厂类 CoffeeFactory</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建咖啡对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Coffee</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Coffee <span class="title function_">createCoffee</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义美式咖啡工厂 AmericanCoffeeFactory，专门用来生产美式咖啡</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanCoffeeFactory</span> <span class="keyword">implements</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义拿铁咖啡工厂 LatteCoffeeFactory，专门用来生产拿铁咖啡</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LatteCoffeeFactory</span> <span class="keyword">implements</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>咖啡店类 CoffeeStore 代码调整如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CoffeeFactory coffeeFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCoffeeFactory</span><span class="params">(CoffeeFactory coffeeFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffeeFactory = coffeeFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">orderCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> coffeeFactory.createCoffee();</span><br><span class="line"></span><br><span class="line">        coffee.addsugar();</span><br><span class="line">        coffee.addMilk();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>咖啡店类定义了咖啡工厂接口属性，通过 set 方式传入具体咖啡工厂进行赋值，当调用下单方法时，通过具体工厂类创建对应的咖啡。</p>
<p>定义客户端类 Client，模拟客户下单</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建咖啡店对象</span></span><br><span class="line">        <span class="type">CoffeeStore</span> <span class="variable">coffeeStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeStore</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置咖啡工厂对象</span></span><br><span class="line">        coffeeStore.setCoffeeFactory(<span class="keyword">new</span> <span class="title class_">LatteCoffeeFactory</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点咖啡</span></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> coffeeStore.orderCoffee();</span><br><span class="line"></span><br><span class="line">        System.out.println(coffee.getName());</span><br><span class="line">        <span class="comment">// 输出: 加糖</span></span><br><span class="line">        <span class="comment">// 加奶</span></span><br><span class="line">        <span class="comment">// 拿铁咖啡</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong></p>
<p>优点：</p>
<ul>
<li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则。</li>
</ul>
<p>缺点：</p>
<ul>
<li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>定义</strong>：定义多个工厂接口和多个产品族接口，每个接口负责创建一类产品族对象，每个产品族接口负责定义一类产品对象。</p>
<p><strong>适用场景</strong>：当需要创建的对象较多，且每个对象都有不同的创建过程，且这些对象属于不同的产品族时。</p>
<p><strong>抽象工厂模式结构</strong>：</p>
<ol>
<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li>
<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>
<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>
<li>具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>
</ol>
<p><strong>场景</strong>：在咖啡品类基础上，现增加甜品类，甜品类有<code>抹茶慕斯</code>和<code>提拉米苏</code>两种，针对美国有美式咖啡和抹茶慕斯，意大利有拿铁咖啡和提拉米苏。</p>
<p>代码设计如下：</p>
<p>类 Coffee、AmericanCoffee、LatteCoffee 代码不变，具体可看上面示例。</p>
<p>定义甜品抽象类 Dessert</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 甜品抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dessert</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义抹茶慕斯类 MatchaMousse，继承甜品抽象类 Dessert</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抹茶慕斯类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchaMousse</span> <span class="keyword">extends</span> <span class="title class_">Dessert</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抹茶慕斯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义提拉米苏类 Tiramisu，继承甜品类 Dessert</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提拉米苏类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tiramisu</span> <span class="keyword">extends</span> <span class="title class_">Dessert</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提拉米苏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义甜品工厂类接口 DessertFactory</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 甜品工厂类接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DessertFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产咖啡的功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Coffee</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Coffee <span class="title function_">createCoffee</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产甜品的功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Dessert</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Dessert <span class="title function_">createDessert</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义美式风味甜品工厂 AmericanDessertFactory，实现甜品工厂类接口 DessertFactory</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 美式风味的甜品工厂</span></span><br><span class="line"><span class="comment"> *  &lt;p&gt;生产美式咖啡 和 抹茶慕斯&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanDessertFactory</span> <span class="keyword">implements</span> <span class="title class_">DessertFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Dessert <span class="title function_">createDessert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MatchaMousse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义意大利风味甜品工厂 ItalyDessertFactory，实现甜品工厂类接口 DessertFactory</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 意大利凤尾甜品工厂</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;生产拿铁咖啡 和 提拉米苏甜品&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItalyDessertFactory</span> <span class="keyword">implements</span> <span class="title class_">DessertFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Dessert <span class="title function_">createDessert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tiramisu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义客户端类 Client，模拟客户下单</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建的是意大利风味甜品工厂对象</span></span><br><span class="line">        <span class="type">DessertFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AmericanDessertFactory</span>();</span><br><span class="line">        <span class="comment">// 获取拿铁咖啡 和 提拉米苏甜品</span></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> factory.createCoffee();</span><br><span class="line">        <span class="type">Dessert</span> <span class="variable">dessert</span> <span class="operator">=</span> factory.createDessert();</span><br><span class="line"></span><br><span class="line">        System.out.println(coffee.getName());	<span class="comment">// 输出: 美式咖啡</span></span><br><span class="line">        dessert.show();	<span class="comment">// 输出: 抹茶慕斯</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong></p>
<p>优点：</p>
<ul>
<li>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用用一个产品族中的对象。</li>
</ul>
<p>缺点：</p>
<ul>
<li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang基础语法</title>
    <url>/posts/3e97faf3/</url>
    <content><![CDATA[<h2 id="GO-基础语法"><a href="#GO-基础语法" class="headerlink" title="GO 基础语法"></a>GO 基础语法</h2><h3 id="go-关键字"><a href="#go-关键字" class="headerlink" title="go 关键字"></a>go 关键字</h3><p>go 语言中一共有 25 个关键字。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> <span class="keyword">default</span> <span class="function"><span class="keyword">func</span> <span class="title">interface</span> <span class="title">select</span> <span class="title">case</span> <span class="title">defer</span></span></span><br><span class="line"><span class="keyword">go</span> <span class="keyword">map</span> <span class="keyword">struct</span> <span class="keyword">chan</span> <span class="keyword">else</span> <span class="keyword">goto</span> <span class="keyword">package</span> <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">fallthrough</span> <span class="keyword">if</span> <span class="keyword">range</span> <span class="keyword">type</span> <span class="keyword">continue</span> <span class="keyword">for</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">return</span> <span class="keyword">var</span></span><br></pre></td></tr></table></figure></div>

<h3 id="go-数据类型定义"><a href="#go-数据类型定义" class="headerlink" title="go 数据类型定义"></a>go 数据类型定义</h3><ol>
<li><code>var</code>声明定义一个变量，定义后，值可修改</li>
<li><code>const</code>声明定义一个变量，定义后，值不可修改</li>
<li><code>:=</code>定义一个变量，类型由后面的值觉得。<strong>常用定义方式</strong></li>
</ol>
<h3 id="go-数据类型"><a href="#go-数据类型" class="headerlink" title="go 数据类型"></a>go 数据类型</h3><p><strong>go数据类型主要分为两类：基本数据类型和派生数据类型</strong></p>
<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>整型、浮点型、字符串、布尔型、字符型</p>
<h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">类型：int8、int16、int32、int64、uint8、uint16、uint32、uint64、byte</span><br><span class="line">长度说明：位即是一个二进制位，8 即2^8=256，如果是有符号则需要一位作为符号位</span><br><span class="line"></span><br><span class="line">整型：分为有符号和无符号。无符号即有符号前加多个 u</span><br><span class="line">例如：有符号8位 int8、无符号8位 uint8</span><br></pre></td></tr></table></figure></div>

<h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>范围</td>
<td>32位、64位</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">浮点型只有两种类型，float32 和 float64，默认：64，64位更加精准</span><br></pre></td></tr></table></figure></div>

<p>PS：底层存储空间和操作系统无关</p>
<p>PS：浮点类型底层存储：符号位 + 指数位 + 尾数位，所以尾数位只是存了一个大概，很可能出现精度的丢失。</p>
<h5 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h5><p>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的，也就是说对于传统的字符串是由字符组成的，而 Go 的字符串是由字节组成的。</p>
<ol>
<li><p>字符使用单引号定义字符，字符定义后无法修改</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> word <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>字符串可以用双引号和反引号定义，字符串定义后可修改</p>
<p>双引号会解析特殊字符，如 \n 或 \r 等，反引号直接原样处理。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> word <span class="type">string</span> = <span class="string">&quot;hello \n world&quot;</span></span><br><span class="line"><span class="keyword">var</span> word2 <span class="type">string</span> = <span class="string">`hello \n world`</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="基本数据类型相互转换"><a href="#基本数据类型相互转换" class="headerlink" title="基本数据类型相互转换"></a>基本数据类型相互转换</h5><p>Golang 和 Java&#x2F;C 不同，Golang 在不同类型的变量之间赋值时<strong>需要显示转换</strong>。也就是 Golang 中数据类型<strong>不能自动转换</strong>。</p>
<p><strong>基本语法：</strong></p>
<ul>
<li>表达式 <code>T(v)</code>将值 v 转换为类型 T</li>
</ul>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="comment">// 转浮点型</span></span><br><span class="line"><span class="keyword">var</span> float <span class="type">float64</span> = <span class="type">float64</span>(num)</span><br><span class="line"><span class="comment">// 转整型无符号8位</span></span><br><span class="line"><span class="keyword">var</span> ui <span class="type">uint8</span> = <span class="type">uint8</span>(num)</span><br><span class="line">fmt.Println(num, float, ui)</span><br></pre></td></tr></table></figure></div>

<p><strong>其他类型转字符串</strong></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一（推荐）</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">23</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, num)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, n2)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">99</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">float64</span> = <span class="number">23.456</span></span><br><span class="line"><span class="keyword">var</span> isTrue <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span> = strconv.FormatInt(<span class="type">int64</span>(num), <span class="number">10</span>)</span><br><span class="line">fmt.Println(str)</span><br><span class="line"></span><br><span class="line">str = strconv.FormatFloat(num2, <span class="string">&#x27;f&#x27;</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(str)</span><br><span class="line"></span><br><span class="line">str = strconv.FormatBool(isTrue)</span><br><span class="line">fmt.Println(str)</span><br></pre></td></tr></table></figure></div>

<h4 id="派生数据类型"><a href="#派生数据类型" class="headerlink" title="派生数据类型"></a>派生数据类型</h4><p>指针、数组、切片、函数、map、结构体、通道、接口</p>
<h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><p>指针保存变量在内存中的地址，与 C 类似，类似 Java 中的引用</p>
<ol>
<li>用<code>*类型</code>来定义指针变量，对于指针变量，可以用<code>*变量名</code>来获取内存地址指向的值</li>
<li>&amp; 用来获取变量的地址</li>
</ol>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> num *<span class="type">int</span> = &amp;a</span><br><span class="line">fmt.Println(*num)</span><br></pre></td></tr></table></figure></div>

<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map 是一种无序的基于 key-value 的数据结构，Go 语言中的 map 是引用类型，必须初始化才能使用。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 需要使用 make() 方法初始化 map</span></span><br><span class="line">	<span class="keyword">var</span> gomap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">	<span class="comment">// 添加</span></span><br><span class="line">	gomap[<span class="number">1</span>] = <span class="type">string</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	gomap[<span class="number">2</span>]= <span class="type">string</span>(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 遍历</span></span><br><span class="line">	<span class="keyword">for</span> key,value := <span class="keyword">range</span> gomap &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index: %v, value: %v \n&quot;</span>, key, value)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line">	<span class="comment">// 删除</span></span><br><span class="line">	<span class="built_in">delete</span>(gomap, <span class="number">1</span>)</span><br><span class="line">	<span class="comment">// 遍历</span></span><br><span class="line">	<span class="keyword">for</span> key,value := <span class="keyword">range</span> gomap &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index: %v, value: %v \n&quot;</span>, key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h5><p><strong>数组：</strong>go 数组与 C 相似。需要定义数组类型，和数组长度。数组长度定义后不能修改。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> intArr [<span class="number">4</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> strArr [<span class="number">2</span>]<span class="type">string</span></span><br><span class="line">	<span class="keyword">var</span> arr = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> doubleArr = [...][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;</span><br><span class="line">	</span><br><span class="line">	fmt.Println(intArr)</span><br><span class="line">	fmt.Println(strArr)</span><br><span class="line">	fmt.Println(arr)</span><br><span class="line">	fmt.Println(doubleArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>切片（Slice）：</strong>在<code>GO</code>语言中，数组是一个固定长度的序列，而切片则是一个可变长度的序列。切片是建立在数组之上的，它提供了<code>动态数组</code>的功能，可以根据需要动态地增加或缩小切片的长度。与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">	s1 := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还可以使用<code>make</code>函数来创建一个指定长度和容量的切片。</p>
<p><code>make</code>的第一个参数为切片类型；第二个参数为切片长度（即实际存储的元素个数）；第三个参数为切片容量，该参数为可选参数，如果为空则值默认为切片长度。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建一个长度为 3、容量为 5 的整型切片</span></span><br><span class="line">	slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">	<span class="comment">// 创建一个长度为 3、容量为 3 的字符串切片</span></span><br><span class="line">	slice2 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">3</span>)</span><br><span class="line">	</span><br><span class="line">	fmt.Println(slice)</span><br><span class="line">	fmt.Println(slice2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还可以直接通过数组或切片来创建一个新的切片，新切片的长度等于从原始数组或切片中指定的开始和结束索引之间的元素个数，容量等于原始数组或切片的长度减去开始索引（<code>s := arr[startIndex:endIndex]</code>）。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个从 arr[1] 开始到 arr[4] 结束的切片</span></span><br><span class="line">slice3 := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 创建一个新切片，容量等于原始切片的长度</span></span><br><span class="line">slice4 := slice3[:]</span><br></pre></td></tr></table></figure></div>

<p>**注意：**当直接从另一个切片创建一个新切片时，两个切片将**共享相同的底层数组**。因此，修改一个切片的元素也会影响到另一个切片。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个从 arr[1] 开始到 arr[4] 结束的切片</span></span><br><span class="line">slice3 := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 创建一个新切片，容量等于原始切片的长度</span></span><br><span class="line">slice4 := slice3[:]</span><br><span class="line">slice3[<span class="number">2</span>] = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">fmt.Println(slice3)</span><br><span class="line">fmt.Println(slice4)</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure></div>

<p><strong>切片追加元素</strong></p>
<p>使用内置的<code>append</code>函数向切片中追加元素，如果切片的容量不够，则会自动扩容。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的切片</span></span><br><span class="line"><span class="keyword">var</span> slice6 []<span class="type">int</span></span><br><span class="line"><span class="comment">// 向切片中追加元素</span></span><br><span class="line">slice6 = <span class="built_in">append</span>(slice6, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(slice6)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向切片中追加元素</span></span><br><span class="line">slice6 = <span class="built_in">append</span>(slice6, <span class="number">9</span>)</span><br><span class="line">fmt.Println(slice6)</span><br></pre></td></tr></table></figure></div>

<p><strong>切片遍历</strong></p>
<p>可以使用<code>for</code>循环或者和<code>for - range</code>关键字来遍历切片中的元素。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;------ for i ----&quot;</span>)</span><br><span class="line"><span class="comment">// for 循环遍历切片</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i ++ &#123;</span><br><span class="line">    <span class="built_in">println</span>(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;---------- for range ------&quot;</span>)</span><br><span class="line"><span class="comment">// for range 遍历切片</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="built_in">println</span>(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>切片复制</strong></p>
<p>可以使用内置<code>copy</code>函数将一个切片中的元素复制到另一个切片中。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">slice6 := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个包含 3 个元素的整数数组</span></span><br><span class="line">slice7 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 将 slice6 中的元素复制到 slice7 中</span></span><br><span class="line"><span class="built_in">copy</span>(slice7, slice6)</span><br><span class="line">fmt.Println(slice7)</span><br></pre></td></tr></table></figure></div>

<p><strong>切片排序</strong></p>
<p>可以使用<code>sort</code>包中的函数对切片进行排序。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">sortArr := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>&#125;</span><br><span class="line">sort.Ints(sortArr)</span><br><span class="line">fmt.Println(sortArr)</span><br></pre></td></tr></table></figure></div>

<h5 id="结构体和面向对象"><a href="#结构体和面向对象" class="headerlink" title="结构体和面向对象"></a>结构体和面向对象</h5><p>Go 中没有“类”的概念，也不支持“类”的继承和面向对象的概念。GO 语言中通过结构体的内嵌在配合接口比面向对象有更高的扩展性和灵活性。</p>
<p><strong>结构体定义</strong></p>
<p>结构体中字段大写开头表示公开访问，小写表示私有（仅在定义当前结构体的包中可访问）</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> &lt;类型名&gt; <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过<code>.</code>号访问结构体属性（与 C 类似）</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user := user&#123;<span class="string">&quot;fly&quot;</span>, <span class="number">18</span>&#125;</span><br><span class="line">	fmt.Println(user.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>结构体实例化方式</strong></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 键值对初始化</span></span><br><span class="line">user2 := &amp;user &#123;name: <span class="string">&quot;fly2&quot;</span>, age: <span class="number">22</span>&#125;</span><br><span class="line">fmt.Println(user2.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值列表</span></span><br><span class="line">user3 := &amp;user&#123;<span class="string">&quot;fly3&quot;</span>, <span class="number">23</span>&#125;</span><br><span class="line">fmt.Println(user3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 关键字</span></span><br><span class="line">user4 := <span class="built_in">new</span>(user)</span><br><span class="line">user4.name = <span class="string">&quot;fly4&quot;</span></span><br><span class="line">fmt.Println(user4.name)</span><br></pre></td></tr></table></figure></div>

<h5 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h5><p>语法格式</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">type &lt;类型名&gt; 类型描述</span><br><span class="line">type ui8 = uint8</span><br><span class="line">// 定义结构体变量</span><br><span class="line">var i ui8 = 1</span><br><span class="line">fmt.Println(i)</span><br></pre></td></tr></table></figure></div>

<h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p><strong>什么是标识符？</strong></p>
<p> 变量，方法等，只要是起名字的地方，那个名字就是标识符</p>
<p><strong>标识符定义规则：</strong></p>
<ol>
<li><p>三个可以（组成部分）：数字、字母、下划线</p>
</li>
<li><p>四个注意：</p>
<ol>
<li>不可以以数字开头</li>
<li>严格区分大小写</li>
<li>不能包含空格</li>
<li>不可以使用 GO 中的保留关键字</li>
</ol>
</li>
<li><p>见名知意：增加可读性</p>
</li>
<li><p>下划线”_”本身在 GO 中是一个特殊的标识符，称为空标识符。可以代表任何其他的标识符，但是它对应的值会被忽略（比如：忽略某个返回值）。所以仅能被作为占位符使用，不能单独作为标识符使用。</p>
</li>
<li><p>可以用如下形式，但是不建议：var int int &#x3D; 10 (int, float32, float64 等不算是保留关键字，但是也尽量不要使用)</p>
</li>
<li><p>长度无限制，但是不建议太长</p>
</li>
<li><p>起名规则</p>
<ol>
<li><p>包名：尽量保持 package 的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库冲突</p>
<ul>
<li>为什么之前在定义源文件的时候，一般我们都用 package main 包？</li>
</ul>
<p>main 包是一个程序的入口包，所以 main 函数它所在的包建议定义为 main 包，如果不定义为 main 包，那么就不能得到可执行文件。</p>
<ul>
<li>尽量保持 package 的名字和目录保持一致</li>
<li>和标准库不要冲突</li>
</ul>
</li>
<li><p>变量名、函数名、常量名：采用<code>驼峰命名法</code></p>
</li>
<li><p>如果变量名、函数名、常量名首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用</p>
</li>
</ol>
</li>
</ol>
<p>注意：</p>
<ol>
<li>import 导入语句通常放在文件开头包声明语句的下面。</li>
<li>导入的包名需要使用双引号包裹起来。</li>
<li>包名是从 $GOPATH&#x2F;src&#x2F; 开始计算的，使用 &#x2F; 进行路径分隔。</li>
</ol>
<p>需要配置一个环境变量：GOPATH</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>定义：对特定的功能进行提取，形成一个代码片段，这个代码片段就是我们所说的函数</p>
<p>作用：提高代码的复用性</p>
<p>基本语法</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(形参列表)</span></span> (返回值类型列表) &#123;</span><br><span class="line">    <span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>（1）函数名：</p>
<ul>
<li>遵循标识符命名规范：见名知意，驼峰命名</li>
<li>首字母不能是数字</li>
<li>首字母大写该函数可以被本包文件和其他包文件使用（类似 public）</li>
<li>首字母小写只能被本包文件使用，其他包文件不能使用（类似 private）</li>
</ul>
<p>（2）形参列表</p>
<p> 形参列表：个数：可以是一个参数，可以是 n 个参数，可以是 0 个参数</p>
<p> 形式参数列表：作用：接收外来的数据</p>
<p> 实际参数：实际的数据</p>
<p>（3）返回值类型列表</p>
<p>个数：可以 0 个，1 个或者多个</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="错误处理-捕获机制"><a href="#错误处理-捕获机制" class="headerlink" title="错误处理&#x2F;捕获机制"></a>错误处理&#x2F;捕获机制</h4><p>go 中追求代码优雅，引入机制：defer + recover 机制处理错误</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test()</span><br><span class="line">	fmt.Println(<span class="string">&quot;finish!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 利用 defer + recover 来捕获错误</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// 调用 recover 内置函数, 可以捕获错误</span></span><br><span class="line">		err := <span class="built_in">recover</span>()</span><br><span class="line">		<span class="comment">// 如果没有捕获错误, 返回值为零值: nil</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;错误已经捕获&quot;</span>)</span><br><span class="line">			fmt.Println(<span class="string">&quot;err是：&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	num1 := <span class="number">10</span></span><br><span class="line">	num2 := <span class="number">0</span></span><br><span class="line">	result := num1 / num2</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>优点：提高程序健壮性</p>
<h4 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h4><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := test2(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;自定义错误：&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;正常执行下面流程...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">&quot;除数不能为0&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result := num1 / num2</span><br><span class="line">		fmt.Println(result)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 实现的功能: 给出 5 个学生的成绩, 求出成绩的总和、平均数</span></span><br><span class="line">	arr()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arr</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初始化数组</span></span><br><span class="line">	<span class="keyword">var</span> score [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">95</span></span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">91</span></span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">49</span></span><br><span class="line">	score[<span class="number">3</span>] = <span class="number">66</span></span><br><span class="line">	score[<span class="number">4</span>] = <span class="number">22</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">	<span class="comment">// 总和</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(score); i ++ &#123;</span><br><span class="line">		sum += score[i]</span><br><span class="line">	&#125;</span><br><span class="line">	avg := <span class="type">float32</span>(sum) / <span class="type">float32</span>(<span class="built_in">len</span>(score))</span><br><span class="line">	fmt.Println(<span class="string">&quot;总和：&quot;</span>, sum)</span><br><span class="line">	fmt.Println(<span class="string">&quot;平均分：&quot;</span>, avg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 2024 java doc预览效果设置</title>
    <url>/posts/cbca3821/</url>
    <content><![CDATA[<p>​	升级 IDEA 至 2024.2.4 版本后，默认方法的注释以预览模式查看，如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/idea/render.png"
                      alt="img"
                ></p>
<p> 若需要更改注释内容，需要点击侧边的按钮切换才可以，相对麻烦，可以通过 IDEA 设置调整。如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/idea/render-setting.png"
                      alt="img"
                ></p>
]]></content>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/posts/610bdf07/</url>
    <content><![CDATA[<h1 id="通用型"><a href="#通用型" class="headerlink" title="通用型"></a>通用型</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>复制</td>
<td>ctrl + c</td>
</tr>
<tr>
<td>粘贴</td>
<td>ctrl +v</td>
</tr>
<tr>
<td>剪切</td>
<td>ctrl + x</td>
</tr>
<tr>
<td>撤销</td>
<td>ctrl + z</td>
</tr>
<tr>
<td>反撤销</td>
<td>ctrl + shift + z</td>
</tr>
<tr>
<td>保存</td>
<td>ctrl + s</td>
</tr>
<tr>
<td>全选</td>
<td>ctrl + a</td>
</tr>
</tbody></table>
<h1 id="提高编写速度"><a href="#提高编写速度" class="headerlink" title="提高编写速度"></a>提高编写速度</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>智能提示</td>
<td>alt + enter</td>
</tr>
<tr>
<td>提示代码模板</td>
<td>ctrl + j</td>
</tr>
<tr>
<td>使用 xx 块环绕</td>
<td>ctrl + alt + t</td>
</tr>
<tr>
<td>调出生成 getter&#x2F;setter 构造器等结构</td>
<td>alt + insert</td>
</tr>
<tr>
<td>自动生成返回值变量</td>
<td>ctrl + alt + v</td>
</tr>
<tr>
<td>复制指定行的代码</td>
<td>ctrl + d</td>
</tr>
<tr>
<td>删除指定行的代码</td>
<td>ctrl + y</td>
</tr>
<tr>
<td>切换到下一行代码空位</td>
<td>shift + enter</td>
</tr>
<tr>
<td>切换到上一行代码空位</td>
<td>ctrl + alt + enter</td>
</tr>
<tr>
<td>向上移动代码</td>
<td>ctrl + shift + ↑</td>
</tr>
<tr>
<td>方法形参列表提醒</td>
<td>ctrl + p</td>
</tr>
<tr>
<td>批量修改指定的变量名、方法名、类名等</td>
<td>shift + f6</td>
</tr>
<tr>
<td>抽取代码重构方法</td>
<td>ctrl + alt + m</td>
</tr>
<tr>
<td>重新父类的方法</td>
<td>ctrl + o</td>
</tr>
<tr>
<td>实现接口的方法</td>
<td>ctrl + i</td>
</tr>
<tr>
<td>选中的结构的大小写切换</td>
<td>ctrl + shift + u</td>
</tr>
<tr>
<td>批量导包</td>
<td>ctrl + alt + o</td>
</tr>
</tbody></table>
<h1 id="类结构、查找和查看源码"><a href="#类结构、查找和查看源码" class="headerlink" title="类结构、查找和查看源码"></a>类结构、查找和查看源码</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>如何查看源码</td>
<td>ctrl + 选中指定的结构 或 ctrl + n</td>
</tr>
<tr>
<td>显示当前类结构，支持搜索指定的方法、属性等</td>
<td>ctrl + f12</td>
</tr>
<tr>
<td>退回到前一个编辑的页面</td>
<td>ctrl + alt + ←</td>
</tr>
<tr>
<td>进入到下一个编辑的页面</td>
<td>ctrl + alt + →</td>
</tr>
<tr>
<td>打开的类文件之间切换</td>
<td>alt + ←&#x2F;→</td>
</tr>
<tr>
<td>光标选中指定的类，查看继承树结构</td>
<td>ctrl + h</td>
</tr>
<tr>
<td>查看方法文档</td>
<td>ctrl + q</td>
</tr>
<tr>
<td>类的 UML 关系图</td>
<td>ctrl + alt + u</td>
</tr>
<tr>
<td>定位某行</td>
<td>ctrl + g</td>
</tr>
<tr>
<td>回溯变量或方法的来源</td>
<td>ctrl + alt + b</td>
</tr>
<tr>
<td>折叠方法实现</td>
<td>ctrl + shift + -</td>
</tr>
<tr>
<td>展开方法实现</td>
<td>ctrl + shift + +</td>
</tr>
<tr>
<td>查看类的继承</td>
<td>ctrl + h</td>
</tr>
</tbody></table>
<h1 id="查找、替换与关闭"><a href="#查找、替换与关闭" class="headerlink" title="查找、替换与关闭"></a>查找、替换与关闭</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>查找指定的结构</td>
<td>ctrl + f</td>
</tr>
<tr>
<td>快速查找：选中的 word 快速定位到下一个</td>
<td>ctrl + I</td>
</tr>
<tr>
<td>查找与替换</td>
<td>ctrl + r</td>
</tr>
<tr>
<td>直接定位到当前行的首位</td>
<td>home</td>
</tr>
<tr>
<td>直接定位到当前行的末尾</td>
<td>end</td>
</tr>
<tr>
<td>查找当前元素在当前文件中的引用，然后按 F3 可以选择</td>
<td>ctrl + f7</td>
</tr>
<tr>
<td>全项目搜索文本</td>
<td>ctrl + shift + f</td>
</tr>
<tr>
<td>关闭当前窗口</td>
<td>ctrl + f4</td>
</tr>
</tbody></table>
<h1 id="调整格式"><a href="#调整格式" class="headerlink" title="调整格式"></a>调整格式</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>格式化代码</td>
<td>ctrl + alt + l</td>
</tr>
<tr>
<td>使用单行注释</td>
<td>ctrl + &#x2F;</td>
</tr>
<tr>
<td>使用 &#x2F; 取消多行注释</td>
<td>ctrl + shift + &#x2F;</td>
</tr>
<tr>
<td>选择数行，整体往后移动</td>
<td>tab</td>
</tr>
<tr>
<td>选中数行，整体往前移动</td>
<td>shift + tab</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok语法</title>
    <url>/posts/ee5b4d8/</url>
    <content><![CDATA[<h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.18.24&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="NoArgsConstructor-AllArgsConstructor-注解"><a href="#NoArgsConstructor-AllArgsConstructor-注解" class="headerlink" title="@NoArgsConstructor&#x2F;@AllArgsConstructor 注解"></a>@NoArgsConstructor&#x2F;@AllArgsConstructor 注解</h2><p>为该类生成无参构造方法和包含所有参数的构造方法 注解使用位置：类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意：此注解不会把父类的属性 id 拿到 User 的构造器里面去</p>
</blockquote>
<h2 id="Data-注解"><a href="#Data-注解" class="headerlink" title="@Data 注解"></a>@Data 注解</h2><p>相当于注解的集合，效果等同于 @Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor 这 5 个注解的效果</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Builder-注解"><a href="#Builder-注解" class="headerlink" title="@Builder 注解"></a>@Builder 注解</h2><p>@Builder 注解提供复制的 builder apis</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    User(String name, Integer age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserBuilder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        UserBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> UserBuilder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> UserBuilder <span class="title function_">age</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> User <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User.UserBuilder(name=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;, age=&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ToString-注解"><a href="#ToString-注解" class="headerlink" title="@ToString 注解"></a>@ToString 注解</h2><p>用于生成 toString() 方法<br>注解使用位置：类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Setter-注解"><a href="#Setter-注解" class="headerlink" title="@Setter 注解"></a>@Setter 注解</h2><p>用于生成类中成员变量的 set() 方法，同时还可以为生成的方法指定访问修饰符，默认为：public<br>注解使用位置：类&#x2F;成员变量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Getter-注解"><a href="#Getter-注解" class="headerlink" title="@Getter 注解"></a>@Getter 注解</h2><p>用于生成类中成员变量的 get() 方法，同时还可以为生成的方法指定访问修饰符，默认为：public<br>注解使用位置：类&#x2F;成员变量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Accessors-注解"><a href="#Accessors-注解" class="headerlink" title="Accessors 注解"></a>Accessors 注解</h2><p>@Accessors 注解为 getter 和 setter 方法设计的更流畅的注解<br>这个注解要搭配 @Getter 和 @Setter 注解使用，用来修改默认的 setter 和 getter 方法的形式</p>
<h3 id="Accessors-注解详解"><a href="#Accessors-注解详解" class="headerlink" title="@Accessors 注解详解"></a>@Accessors 注解详解</h3><ul>
<li>fluent 属性：链式的形式，可以使方法连缀起来进行编写</li>
<li>chain 属性：流式的形式，默认：false</li>
<li>prefix 属性：生成指定前缀的属性 getter 和 setter 方法，并且生成的 getter 与 setter 方法时会去除前缀</li>
</ul>
<h3 id="fluent-属性"><a href="#fluent-属性" class="headerlink" title="fluent 属性"></a>fluent 属性</h3><p>默认为：false，当该值为 true 时，对应字段的 getter 方法前面没有 get，setter 方法前面不会有 set</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(fluent = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">age</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="chain-属性"><a href="#chain-属性" class="headerlink" title="chain 属性"></a>chain 属性</h4><p>默认为：false，当该值为 true 时，对应字段的 setter 方法调用后，会返回当前对象，进行链式设置值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="prefix-属性"><a href="#prefix-属性" class="headerlink" title="prefix 属性"></a>prefix 属性</h4><p>该属性是一个字符串数组，当该数组有值时，表示忽略字段中对应的前缀，生成对应的 getter 和 setter 方法<br>如果我们把它的前缀加到 @Accessors 的属性值中，则可以像没有前缀那样，去调用字段的 getter 和 setter 方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(prefix = &#123;&quot;xx&quot;, &quot;yy&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String xxName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer yyAge;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://localhost:63342/markdownPreview/1806850190/fileSchemeResource/8495b83587bcf8cf47367b7f690708e0-accessors-prefix.jpg?_ijt=sejjqegjglrrjik75q7dbuv4km"
                      alt="accessorprefix"
                ></p>
]]></content>
      <categories>
        <category>lombok</category>
      </categories>
      <tags>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-原型模式</title>
    <url>/posts/34963c84/</url>
    <content><![CDATA[<p><code>原型模式</code>是一种创建型设计模式，它允许通过复制现有对象来创建新的对象，而无需显式地指定它们的类。在原型模式中，一个对象作为原型，通过复制自己来创建新的对象。原型模式适用于对象的创建过程非常复杂的情况下，可以通过复制已有的对象来避免重复创建相似的对象，从而提高系统的性能。</p>
<p>原型模式有两种实现方式：浅克隆和深克隆。</p>
<p>浅克隆：浅克隆只复制对象本身和其中的基础数据类型，而不会复制对象中的引用类型。也就是说，新对象中的引用类型变量和原对象中的引用类型变量指向同一个对象。Java 中的 Object 类提供了一个 clone() 方法，可以实现浅克隆。</p>
<p>要实现克隆，需要满足以下条件：</p>
<ol>
<li>实现 Cloneable 接口，否则会抛出 CloneNotSupportException 异常；</li>
<li>重写 clone() 方法，并使用 super.clone() 来创建新的对象。</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA打开文件后左侧有很多空白设置</title>
    <url>/posts/1384e06/</url>
    <content><![CDATA[<p>IDEA 升级到 2024.1 版本后，打开文件发现文件左侧空白太多了，截图如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/idea_01.png"
                      alt="image-20240417153929981"
                ></p>
<p>解决方案，在 idea 菜单栏 view 处找到 View &gt; Appearance &gt; Exit Distraction Free Mode 设置即可，截图如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/idea_02.png"
                      alt="image-20240417154347065"
                ></p>
]]></content>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK17新特性</title>
    <url>/posts/941e419f/</url>
    <content><![CDATA[<h2 id="1-Java-Record"><a href="#1-Java-Record" class="headerlink" title="1. Java Record"></a>1. Java Record</h2><p> Java14 中预览的新特性叫做 Record，在 Java 中，Record 是一种特殊类型的 Java 类。可用来创建不可变类，语法简短。参考 <a class="link"   href="https://openjdk.java.net/jeps/395" >JEP 395 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，Jackson 2.12 支持 Record 类。</p>
<p><strong>Java Record 避免上述的样板代码，如下特点：</strong></p>
<ol>
<li>带有全部参数的构造方法</li>
<li>public 访问器</li>
<li>toString(), hashCode(), equals() 方法</li>
<li>无 set，get 方法。没有遵循 Bean 的命名规范</li>
<li>final 类，不能继承 Record，Record 为隐式的 final 类。除此之外与普通类一样。</li>
<li>不可变类，通过构造创建 Record。</li>
<li>final 属性，不可修改。</li>
<li>不能声明实例属性，能声明 static 成员。</li>
</ol>
<h3 id="Record-使用"><a href="#Record-使用" class="headerlink" title="Record 使用"></a>Record 使用</h3><p><strong>Record 使用</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">User</span><span class="params">(Integer id, String name, String email, Integer age)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Instance Method</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">User</span><span class="params">(Integer id, String name, String email, Integer age)</span> &#123;</span><br><span class="line">    <span class="comment">// 实例方法，concat 连接字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;姓名是%s，年龄是%d&quot;</span>, <span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法，把 email 转为大写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">emailToUpperCase</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(email)</span><br><span class="line">            .orElse(<span class="string">&quot;no email&quot;</span>)</span><br><span class="line">            .toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Record的构造方法</strong></p>
<p> 我们可以在 Record 中添加构造方法，有三种类型的构造方法分别是：<strong>紧凑的</strong>，<strong>规范的</strong>和<strong>定制构造方法</strong></p>
<ul>
<li>紧凑型构造方法没有任何参数，甚至没有括号</li>
<li>规范构造方法是以所有成员作为参数</li>
<li>定制构造方法是自定义参数个数</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">User</span><span class="params">(Integer id, String name, String email, Integer age)</span> &#123;</span><br><span class="line">    <span class="comment">// 紧凑型</span></span><br><span class="line">    <span class="keyword">public</span> User &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span> + id);</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;id&lt;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定制构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(id, name, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Record-与-Lombok"><a href="#Record-与-Lombok" class="headerlink" title="Record 与 Lombok"></a>Record 与 Lombok</h3><p> Java Record 是创建不可变类且减少样板代码的好方法。Lombok 是一种减少样板代码的工具。两者有表面上的重叠部分。</p>
<p> Lombok 提供语法的便利性，通常预装一些代码模板，根据您加入到类中的注解自动执行代码模板。这样的库纯粹是为了方便实现 POJO 类。通过预编译代码，将代码的模板加入到 class 中。</p>
<p> Java Record 是语言级别的，一种语义特性，为了建模而用，数据聚合。简单来说就是提供了通用的数据类，充当“<strong>数据载体</strong>”，用于在类和应用程序之间进行数据传输。</p>
<p><strong>Local Record</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">        <span class="comment">// 定义 local record</span></span><br><span class="line">        <span class="keyword">record</span> <span class="title class_">SaleRecord</span><span class="params">(String saleId, String productName, Double money)</span> &#123;&#125;;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">SalaRecord</span> <span class="variable">saleRecord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaleRecord</span>(<span class="string">&quot;S001&quot;</span>, <span class="string">&quot;显示器&quot;</span>, <span class="number">1000.01</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;saleRecord = &quot;</span> + saleRecord);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-Switch-表达式"><a href="#2-Switch-表达式" class="headerlink" title="2. Switch 表达式"></a>2. Switch 表达式</h2><p>使用 switch 表达式和语句的<strong>模式匹配</strong>以及对模式语言的扩展来增强 Java 编程语言。这个新特性允许使用新的模式，包括<strong>类型模式</strong>和<strong>守卫模式</strong>。类型模式能够在 switch 表达式中使用 instanceof，守卫模式能够使用布尔表达式。</p>
<h3 id="类型模式"><a href="#类型模式" class="headerlink" title="类型模式"></a>类型模式</h3><p>JDK16 instanceof 模式匹配</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String str) &#123;</span><br><span class="line">            <span class="comment">// 直接使用 str</span></span><br><span class="line">            str += <span class="string">&quot;fly&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer i) &#123;</span><br><span class="line">            <span class="comment">// 直接使用 i 进行整型逻辑运算</span></span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>JDK17 switch 可直接使用 instanceof 模式匹配选择（需要提前考虑 null 判断）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">switch</span>(obj) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="literal">null</span> -&gt; System.out.println(<span class="string">&quot;判空逻辑&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> String s -&gt; System.out.println(<span class="string">&quot;判断字符串逻辑：&quot;</span> + s);</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">record</span> <span class="title class_">r</span> -&gt; System.out.println(<span class="string">&quot;判断 Record 类型逻辑：&quot;</span> + r.toString());</span><br><span class="line">            <span class="keyword">case</span> <span class="type">int</span>[] iArr -&gt; System.out.println(<span class="string">&quot;判断是否 int 数组，长度:&quot;</span> + iArr.length);</span><br><span class="line">            <span class="keyword">case</span> Integer i -&gt; System.out.println(<span class="string">&quot;判断是否 Integer 对象，i:&quot;</span> + i);</span><br><span class="line">            <span class="keyword">case</span> User u -&gt; System.out.println(<span class="string">&quot;判断是否为 User 对象，user: &quot;</span> + u.toString());</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="守卫模式"><a href="#守卫模式" class="headerlink" title="守卫模式"></a>守卫模式</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(obj) &#123;</span><br><span class="line">            <span class="keyword">case</span> String s &amp;&amp; s.length() &gt; <span class="number">0</span> -&gt; s;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Switch-特点"><a href="#Switch-特点" class="headerlink" title="Switch 特点"></a>Switch 特点</h3><ul>
<li>支持箭头表达式</li>
<li>支持 yield 返回值</li>
<li>支持 Java Record</li>
</ul>
<h4 id="箭头表达式"><a href="#箭头表达式" class="headerlink" title="箭头表达式"></a>箭头表达式</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> -&gt; message = <span class="string">&quot;星期日，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; message = <span class="string">&quot;工作日&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> -&gt; message = <span class="string">&quot;星期六，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无效数据！&quot;</span>);</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="yield-返回值"><a href="#yield-返回值" class="headerlink" title="yield 返回值"></a>yield 返回值</h4><ul>
<li>yield 让 switch 作为表达式，能够返回值；</li>
<li>无需中间变量，switch 作为表达式计算，可以得到结果，yield 是表达式的返回值；</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> swithc(week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周日，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;工作日&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周六，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;无效数据&quot;</span>;</span><br><span class="line">        &#125;;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="多表达式，case-与-yield-结合使用"><a href="#多表达式，case-与-yield-结合使用" class="headerlink" title="多表达式，case 与 yield 结合使用"></a>多表达式，case 与 yield 结合使用</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">switch</span>(week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;周日，休息&quot;</span>);</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周日，休息&quot;</span>;</span><br><span class="line">            &#125;      </span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;工作日&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;周六，休息&quot;</span>);</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周六，休息&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：case -&gt; 不能与 case: 混用，一个 switch 语句块中只能使用一种语法格式</strong></p>
<h2 id="3-文本块"><a href="#3-文本块" class="headerlink" title="3. 文本块"></a>3. 文本块</h2><p>在 Java17 之前的版本里，如果我们需要定义一个复杂的字符串，比如 JSON 字符串：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> + </span><br><span class="line">        <span class="string">&quot; \&quot;name\&quot;: \&quot;Java\&quot;, \n&quot;</span> +</span><br><span class="line">        <span class="string">&quot; \&quot;age\&quot;: 20, \n&quot;</span> + </span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这种方式定义有几个问题：</p>
<ul>
<li>双引号需要进行转义；</li>
<li>为了字符串的可读性需要通过 <strong>+</strong> 号连接；</li>
<li>如果需要将 JSON 复制到代码中需要做大量的格式调整；</li>
</ul>
<p>通过 Java17 中的文本块语法，类似的字符串处理则会方便很多；通过三个双引号可以定义一个文本块，并且结束的三个双引号不能和开始的在同一行。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;java&quot;,</span></span><br><span class="line"><span class="string">                &quot;age&quot;: 18</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-Stream-toList-方法"><a href="#4-Stream-toList-方法" class="headerlink" title="4. Stream.toList() 方法"></a>4. Stream.toList() 方法</h2><p>如果需要将 Stream 转换成 List，需要通过调用 collect() 方法使用 Collectors.toList() 进行转换，代码非常冗长。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; strStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        List&lt;String&gt; strList = strStream.collect(Collectos.toList());</span><br><span class="line">        <span class="keyword">for</span> (String s : strList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 Java17 中将变得简单，可以直接调用 toList() 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; strStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        List&lt;String&gt; strList = strStream.toList();</span><br><span class="line">        <span class="keyword">for</span> (String s : strList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-var"><a href="#5-var" class="headerlink" title="5. var"></a>5. var</h2><p>  在 JDK10 以及更高版本中，可以使用 var 标识符声明具有非空初始化的局部变量，这可以帮助我们编写简介的代码，消除冗余信息使代码更具可读性。</p>
<h3 id="var-声明局部变量"><a href="#var-声明局部变量" class="headerlink" title="var 声明局部变量"></a>var 声明局部变量</h3><ul>
<li>var 特点<ul>
<li>var 是一个保留字，不是关键字（可以声明 var 为变量名）</li>
<li>方法内声明的局部变量，必须有初始值，不能为空</li>
<li>每次声明一个变量，不能复合声明多个变量</li>
<li>var 动态类型是编译器根据变量所赋的值来推断类型</li>
<li>var 代替显示类型，代码简洁，减少不必要的排版</li>
</ul>
</li>
<li>var 优缺点<ul>
<li>代码简洁和整齐</li>
<li>降低了程序的可读性</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyExcel读取合并单元格数据</title>
    <url>/posts/56baab11/</url>
    <content><![CDATA[<h2 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h2><p>EasyExcel 文档地址：<a class="link"   href="https://easyexcel.opensource.alibaba.com/docs/current/quickstart/read" >https://easyexcel.opensource.alibaba.com/docs/current/quickstart/read <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>当 excel 表格的数据表头和内容都比较工整，每个单元格对应一个数据时，通过 EasyExcel 可以很容易就将数据读取出来。但是当表格数据存在<code>合并单元格</code>时，还是按照 EasyExcel 原来的方式读取数据，读取出来的数据只有合并单元格的<code>首行</code>才有数据，其他行的数据均为<code>null</code>。</p>
<h2 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h2><p>首先需要知道 <code>excel</code>表格合并单元格的原理：<code>在合并单元格时，仅保留左上角的值，而放弃其他值</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/easyexcel/01.png"
                      alt="img"
                ></p>
<p>也就是说合并的单元格取的值都是<code>左上角的值</code>。</p>
<h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><p>EasyExcel 处理合并单元格文档地址：</p>
<p><a class="link"   href="https://easyexcel.opensource.alibaba.com/docs/current/quickstart/read#%E9%A2%9D%E5%A4%96%E4%BF%A1%E6%81%AF%E6%89%B9%E6%B3%A8%E8%B6%85%E9%93%BE%E6%8E%A5%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC%E4%BF%A1%E6%81%AF%E8%AF%BB%E5%8F%96" >https://easyexcel.opensource.alibaba.com/docs/current/quickstart/read#%E9%A2%9D%E5%A4%96%E4%BF%A1%E6%81%AF%E6%89%B9%E6%B3%A8%E8%B6%85%E9%93%BE%E6%8E%A5%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC%E4%BF%A1%E6%81%AF%E8%AF%BB%E5%8F%96 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/easyexcel/02.png"
                      alt="img"
                ></p>
<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.metadata.CellExtra;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.excel.read.listener.ReadListener;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel 监听器</span></span><br><span class="line"><span class="comment"> * Created by fengxuguang on 2024/5/23 9:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelListener</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">ReadListener</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">headNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;CellExtra&gt; extraMergeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExcelListener</span><span class="params">(Integer headNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.headNumber = headNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(T data, AnalysisContext analysisContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (analysisContext.readRowHolder().getRowIndex() &gt;= headNumber) &#123;</span><br><span class="line">            list.add(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extra</span><span class="params">(CellExtra extra, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (extra.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> COMMENT:</span><br><span class="line">                log.info(<span class="string">&quot;解析到一条注释:&#123;&#125;&quot;</span>, extra.toString());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HYPERLINK:</span><br><span class="line">                log.info(<span class="string">&quot;解析到一条链接:&#123;&#125;&quot;</span>, extra.toString());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MERGE:</span><br><span class="line"><span class="comment">//                log.info(</span></span><br><span class="line"><span class="comment">//                        &quot;额外信息是超链接,而且覆盖了一个区间,在firstRowIndex:&#123;&#125;,firstColumnIndex;&#123;&#125;,lastRowIndex:&#123;&#125;,lastColumnIndex:&#123;&#125;&quot;,</span></span><br><span class="line"><span class="comment">//                        extra.getFirstRowIndex(), extra.getFirstColumnIndex(), extra.getLastRowIndex(),</span></span><br><span class="line"><span class="comment">//                        extra.getLastColumnIndex());</span></span><br><span class="line">                <span class="keyword">if</span> (extra.getRowIndex() &gt;= headNumber) &#123;</span><br><span class="line">                    extraMergeList.add(extra);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ReadListener.<span class="built_in">super</span>.extra(extra, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在读取文件的时候添加 <code>.extraRead(CellExtraTypeEnum.MERGE)</code>就能获取所有的合并单元格，代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ExcelListener&lt;T&gt; readListener = <span class="keyword">new</span> <span class="title class_">ExcelListener</span>&lt;T&gt;(headRowNumber);</span><br><span class="line">EasyExcel.read(inputStream, clazz, readListener)</span><br><span class="line">        <span class="comment">// 需要读取合并单元格信息 默认不读取</span></span><br><span class="line">        .extraRead(CellExtraTypeEnum.MERGE)</span><br><span class="line">        .sheet(sheetIndex)</span><br><span class="line">        .doRead();</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/easyexcel/03.png"
                      alt="img"
                ></p>
<p>在<code>EasyExcel</code>中可以通过 <code>@ExcelProperty</code>中的<code>index</code>属性来标明该字段的索引，例如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExcelProperty(value = &quot;名称&quot;, index = 2)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>java</category>
        <category>easyexcel</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>easyexcel</tag>
      </tags>
  </entry>
  <entry>
    <title>ListUtil封装jdk8-stream语法，简化代码编写</title>
    <url>/posts/508b40e4/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​	由于在日常开发中，会经常使用到<code>JDK8</code>中的<code>Stream</code>语法糖，然而在使用过程中，发现存在很多冗余的方法，便想着封装个工具类，简化开发过程中的使用。</p>
<h2 id="工具类-ListUtil"><a href="#工具类-ListUtil" class="headerlink" title="工具类 ListUtil"></a>工具类 ListUtil</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK8-Stream 工具类封装</span></span><br><span class="line"><span class="comment"> * Created by fengxuguang on 2024/3/20 14:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤出有效 属性, 并去重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper 处理属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;String&gt; 返回结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;List&lt;String&gt; <span class="title function_">filterValidValue</span><span class="params">(List&lt;T&gt; list, Function&lt;? <span class="built_in">super</span> T, String&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .map(mapper)</span><br><span class="line">                .filter(StringUtils::isNotBlank)</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤多字段有效值, 并去重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappers 属性, 支持多属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;String&gt; 返回结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;String&gt; <span class="title function_">filterValidValueForFields</span><span class="params">(List&lt;T&gt; list, Function&lt;? <span class="built_in">super</span> T, String&gt; ...mappers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Function&lt;? <span class="built_in">super</span> T, String&gt; mapper : mappers) &#123;</span><br><span class="line">            result.addAll(list.stream()</span><br><span class="line">                    .map(mapper)</span><br><span class="line">                    .filter(StringUtils::isNotBlank)</span><br><span class="line">                    .distinct()</span><br><span class="line">                    .collect(Collectors.toList()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 List 转为 Map, 如果有相同元素, 去第一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list list集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyMapper 作为属性列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map&lt;String, T&gt; map 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">toMap</span><span class="params">(List&lt;T&gt; list, Function&lt;? <span class="built_in">super</span> T, String&gt; keyMapper)</span> &#123;</span><br><span class="line">        BinaryOperator&lt;T&gt; miss = (k1, k2) -&gt; k1;</span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .collect(Collectors.toMap(keyMapper, Function.identity(), miss));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list list 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> predicate 断言</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt; 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">filter</span><span class="params">(List&lt;T&gt; list, Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .filter(predicate)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 List 集合内实体中某属性的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list List集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt; 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt; 返回集合内实体的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R, T&gt; List&lt;R&gt; <span class="title function_">map</span><span class="params">(List&lt;T&gt; list, Function&lt;? <span class="built_in">super</span> T, R&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .map(mapper)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 List 集合按照集合内实体某属性进行分组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list List集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map&lt;R, List&lt;T&gt; map 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt; 分组属性类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R, T&gt; Map&lt;R, List&lt;T&gt;&gt; <span class="title function_">groupBy</span><span class="params">(List&lt;T&gt; list, Function&lt;? <span class="built_in">super</span> T, R&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(mapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 List 集合按照实体属性 keyMapper 作为 key, valueMapper 作为 value 封装成 map 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list List集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyMapper 实体属性, 作为 map 集合的 key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueMapper 实体属性, 作为 map 集合的 value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map&lt;K, List&lt;R&gt;&gt; map 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; 返回 map 集合的 key 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参 List 集合类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt; 返回 map 集合的 value 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, T, R&gt; Map&lt;K, List&lt;R&gt;&gt; <span class="title function_">groupBy</span><span class="params">(List&lt;T&gt; list,</span></span><br><span class="line"><span class="params">                                                    Function&lt;? <span class="built_in">super</span> T, K&gt; keyMapper,</span></span><br><span class="line"><span class="params">                                                    Function&lt;? <span class="built_in">super</span> T, R&gt; valueMapper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;K, List&lt;R&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        groupBy(list, keyMapper).forEach((k, v) -&gt; result.put(k, map(v, valueMapper)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 List 集合过滤之后的一个数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list List 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> predicate 断言, 过滤条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Optional&lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Optional&lt;T&gt; <span class="title function_">findOne</span><span class="params">(List&lt;T&gt; list, Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .filter(predicate)</span><br><span class="line">                .findFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 List 集合过滤后的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list List 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> predicate 断言, 过滤条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long 数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 形参集合内实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">count</span><span class="params">(List&lt;T&gt; list, Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .filter(predicate)</span><br><span class="line">                .count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>jdk8</tag>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>动态 Druid 连接池</title>
    <url>/posts/ecd042ad/</url>
    <content><![CDATA[<h2 id="动态-Druid-连接池"><a href="#动态-Druid-连接池" class="headerlink" title="动态 Druid 连接池"></a>动态 Druid 连接池</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p> <strong>需求</strong>：因项目业务需求，需要在系统上配置不同数据库，然后进行连接获取数据库相关数据； 原生 JDBC 通过 DriverManager 进行连接每次都要重新进行连接，导致整体查询时间效率变低，故引入 Druid 连接池；<br>  但是不同类型数据库生成<code>DruidDataSource</code>后没有将<code>DS(DruidDataSource)</code>进行缓存起来， 本质还是每次连接数据库时还是重新进行数据库连接，问题依然存在。<br>  所以设计了一个<code>容器</code>将<code>DS</code>缓存起来，考虑到容器里数量限制，使用<code>LinkedHashMap</code>进行存储数据，控制存储<code>DS</code>的数量。 另考虑缓存起来的<code>DS</code>存在数据库密码修改的情况，支持更新<code>容器</code>内<code>DS</code>的<code>密码</code>，保证 DS 可用。<br>具体代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接池工具类</span></span><br><span class="line"><span class="comment"> * Created by fengxuguang on 2023/12/28 11:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionPoolUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化大小, 设置为 10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_IDLE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ACTIVE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接等待超时时间, 单位: 毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_WAIT</span> <span class="operator">=</span> <span class="number">60_000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 间隔多久检测一次需要关闭的空闲连接, 单位: 毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIME_BETWEEN_EVICTION_RUNS_MILLIS</span> <span class="operator">=</span> <span class="number">200_000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重连次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONNECTION_ERRORS_RETRY_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个空闲连接在池中最小生存的时间, 单位是毫秒, 设置 5 分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_EVICT_TABLE_IDLE_TIME_MILLIS</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池容器最大数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONTAINER_MAX_SIZE</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;DbSourceKey, DruidDataSource&gt; containers = <span class="keyword">new</span> <span class="title class_">ContainerLinkedHashMap</span>(CONTAINER_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 DataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driverName 连接 driver-class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connStr 连接 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validateQuery 校验查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">getDataSource</span><span class="params">(String driverName, String connStr, String username, String password,</span></span><br><span class="line"><span class="params">                                                String validateQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DbSourceKey</span> <span class="variable">dbSourceKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DbSourceKey</span>(connStr, username, password);</span><br><span class="line">            <span class="keyword">if</span> (containers.containsKey(dbSourceKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDruidDataSource(dbSourceKey);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            containers.put(dbSourceKey, createDruidDataSource(driverName, connStr, username, password, validateQuery));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> containers.get(dbSourceKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;创建数据源连接池失败：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 DruidDataSource 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driverName driver-class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connStr 连接 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validateQuery 保持连接SQL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">createDruidDataSource</span><span class="params">(String driverName, String connStr, String username, String password,</span></span><br><span class="line"><span class="params">                                           String validateQuery)</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基础连接信息</span></span><br><span class="line">        ds.setDriverClassName(driverName);</span><br><span class="line">        ds.setUrl(connStr);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化大小</span></span><br><span class="line">        ds.setInitialSize(INITIAL_SIZE);</span><br><span class="line">        ds.setMinIdle(MIN_IDLE);</span><br><span class="line">        ds.setMaxActive(MAX_ACTIVE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接泄露监测</span></span><br><span class="line">        ds.setRemoveAbandoned(<span class="literal">true</span>);</span><br><span class="line">        ds.setRemoveAbandonedTimeout(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置时间</span></span><br><span class="line">        <span class="comment">// 配置获取连接等待超时的时间</span></span><br><span class="line">        ds.setMaxWait(MAX_WAIT);</span><br><span class="line">        <span class="comment">// 配置间隔多久才进行一次检测, 检测需要关闭的空闲连接, 单位: 毫秒</span></span><br><span class="line">        ds.setTimeBetweenEvictionRunsMillis(TIME_BETWEEN_EVICTION_RUNS_MILLIS);</span><br><span class="line">        <span class="comment">// 设置重连次数</span></span><br><span class="line">        ds.setBreakAfterAcquireFailure(<span class="literal">true</span>);</span><br><span class="line">        ds.setConnectionErrorRetryAttempts(CONNECTION_ERRORS_RETRY_COUNT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止过期</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(validateQuery)) &#123;</span><br><span class="line">            validateQuery = <span class="string">&quot;SELECT &#x27;x&#x27;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;-1&quot;</span>.equals(validateQuery)) &#123;</span><br><span class="line">            validateQuery = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ds.setValidationQuery(validateQuery);</span><br><span class="line">        ds.setTestWhileIdle(<span class="literal">true</span>);</span><br><span class="line">        ds.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line">        ds.setMinEvictableIdleTimeMillis(MIN_EVICT_TABLE_IDLE_TIME_MILLIS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 dbSourceKey 获取 DruidDataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbSourceKey dbSourceKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">(DbSourceKey dbSourceKey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!containers.containsKey(dbSourceKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// verify whether the password is changed. if the password is changed, update the password in the DruidDataSource</span></span><br><span class="line">        <span class="keyword">if</span> (!dbSourceKey.getPassword().equals(containers.get(dbSourceKey).getPassword())) &#123;</span><br><span class="line">            containers.get(dbSourceKey).setPassword(dbSourceKey.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> containers.get(dbSourceKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容器链表, 用于存储 DruidDataSource, key: DbSourceKey, value: DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContainerLinkedHashMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;DbSourceKey, DruidDataSource&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 链接最大容量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">        ContainerLinkedHashMap(<span class="type">int</span> maxSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxSize = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> DruidDataSource <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;DbSourceKey, DruidDataSource&gt; eldest)</span> &#123;</span><br><span class="line">            <span class="comment">// 超过最大容量, 需要移除旧的数据</span></span><br><span class="line">            <span class="keyword">if</span> (containers.size() &gt; maxSize) &#123;</span><br><span class="line">                <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> eldest.getValue();</span><br><span class="line">                druidDataSource.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> containers.size() &gt; maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据源信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DbSourceKey</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 连接 url, 设置后不可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String connStr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 账号, 设置后不可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String account;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 密码, 设置后密码可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Setter</span></span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">        DbSourceKey(String connStr, String account, String password) &#123;</span><br><span class="line">            <span class="built_in">this</span>.connStr = connStr;</span><br><span class="line">            <span class="built_in">this</span>.account = account;</span><br><span class="line">            <span class="built_in">this</span>.password = password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">DbSourceKey</span> <span class="variable">that</span> <span class="operator">=</span> (DbSourceKey) o;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(connStr, that.connStr) &amp;&amp; Objects.equals(account, that.account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(connStr, account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><ol>
<li><code>ContainerLinkedHashMap</code>继承<code>LinkedHashMap</code>后重写<code>removeEldestEntry</code>方法的原因。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>解释：由于<code>LinkedHashMap</code>继承<code>HashMap</code>，<code>LinkedHashMap</code>在调用<code>put</code>方法时，实际是调用<code>HashMap</code>的<code>put</code>方法，<code>HashMap</code>的<code>put</code>方法源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看源码可知，调用<code>put</code>方法后接着去调用<code>putVal</code>方法，在将数据插入到<code>HashMap</code>后，会调用<code>afterNodeInsertion</code>方法，默认<code>HashMap</code>对此方法不做处理。但是<code>LinkedHashMap</code>对<code>afterNodeInsertion</code>此方法进行了处理，源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;</span><br><span class="line">            removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>afterNodeInsertion</code>方法内会调用<code>removeEldestEntry</code>方法来判断是否删除链表头数据，默认<code>LinkedHashMap</code>的<code>removeEldestEntry</code>返回<code>false</code>，表示不移除链表头元素。</p>
<p><code>ContainerLinkedHashMap</code>继承<code>LinkedHashMap</code>后，可以对<code>removeEldestEntry</code>方法进行重新，根据链表内的容量来判断是否需要删除链表头元素，以达到控制链表容量的目的。</p>
<p>ps：<code>removeEldestEntry</code>方法在<code>LinkedHashMap</code>调用时传入的参数为链表的头元素。</p>
<p>源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContainerLinkedHashMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;DbSourceKey, DruidDataSource&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;DbSourceKey, DruidDataSource&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="comment">// 超过最大容量, 需要移除旧的数据</span></span><br><span class="line">        <span class="keyword">if</span> (containers.size() &gt; maxSize) &#123;</span><br><span class="line">            <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> eldest.getValue();</span><br><span class="line">            druidDataSource.close();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> containers.size() &gt; maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>13.罗马数字转整数【简单】</title>
    <url>/posts/b31c3da/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure></div>

<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>
<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li>
<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 4:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 5:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 15</code></li>
<li><code>s</code> 仅含字符 <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code></li>
<li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li>
<li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li>
<li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li>
<li>关于罗马数字的详尽书写规则，可以参考 <a class="link"   href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article" >罗马数字 - Mathematics  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</li>
</ul>
<p>Related Topics</p>
<p>哈希表</p>
<p>数学</p>
<p>字符串</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="go-实现一"><a href="#go-实现一" class="headerlink" title="go 实现一"></a>go 实现一</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i &lt; <span class="built_in">len</span>(s); i ++&#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;M&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// m 为 1000</span></span><br><span class="line">            sum += <span class="number">1000</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;D&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// d 为 500</span></span><br><span class="line">            sum += <span class="number">500</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;C&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// c 为 100</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;M&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">900</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;D&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">400</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">100</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;L&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// l 为 50</span></span><br><span class="line">            sum += <span class="number">50</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;X&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// x 为 10</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;C&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">90</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;L&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">40</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;V&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// V 为 5</span></span><br><span class="line">            sum += <span class="number">5</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;I&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// I 为 1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s)<span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;V&#x27;</span> &#123;</span><br><span class="line">               sum += <span class="number">4</span></span><br><span class="line">               i ++ </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s)<span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;X&#x27;</span> &#123;</span><br><span class="line">               sum += <span class="number">9</span></span><br><span class="line">               i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="go实现二"><a href="#go实现二" class="headerlink" title="go实现二"></a>go实现二</h3><p><strong>思路</strong></p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。若输入的字符串满足该情况，那么可以将每个字符视作一个单独的值，累加每个字符对应的数值即可。</p>
<p>例如 XXVII 可视作 X+X+V+I+I&#x3D;10+10+5+1+1&#x3D;27。</p>
<p>若存在小的数字在大的数字的左边的情况，根据规则需要减去小的数字。对于这种情况，我们也可以将每个字符视作一个单独的值，若一个数字右侧的数字比它大，则将该数字的符号取反。</p>
<p>例如 XIV 可视作 X−I+V&#x3D;10−1+5&#x3D;14。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> symbolValues = <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">        value := symbolValues[s[i]]</span><br><span class="line">        <span class="keyword">if</span> i &lt; n<span class="number">-1</span> &amp;&amp; value &lt; symbolValues[s[i+<span class="number">1</span>]] &#123;</span><br><span class="line">            ans -= value</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1.两数之和【简单】</title>
    <url>/posts/88b7b605/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p>
<p>Related Topics</p>
<p>数组</p>
<p>哈希表</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="type">int</span>[] r = &#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>33.搜索旋转排序数组【中等】</title>
    <url>/posts/35a2d738/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p>
<p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p>
<p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p>
<p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p>
<p>示例 1：</p>
<p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0 输出：4 示例 2：</p>
<p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3 输出：-1 示例 3：</p>
<p>输入：nums &#x3D; [1], target &#x3D; 0 输出：-1 提示：</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 5000 -104 &lt;&#x3D; nums[i] &lt;&#x3D; 104 nums 中的每个值都 独一无二 题目数据保证 nums 在预先未知的某个下标上进行了旋转 -104 &lt;&#x3D; target &lt;&#x3D; 104 Related Topics 数组 二分查找</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightIndex</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (leftIndex &lt;= rightIndex) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> (leftIndex + rightIndex) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mod] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 递增</span></span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= nums[mod]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mod]) &#123;</span><br><span class="line">                    rightIndex = mod - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    leftIndex = mod + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mod] &lt; target &amp;&amp; target &lt;= nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">                    leftIndex = mod + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rightIndex = mod - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>2.两数相加【中等】</title>
    <url>/posts/75f33ffa/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p>示例 1： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://localhost:63342/markdownPreview/656424150/fileSchemeResource/5cb4f4750835a1e1d2275e6462aaee79-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.jpg?_ijt=642k9e1p0barlulpav50s3cr9o"
                      alt="img"
                > 输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4] 输出：[7,0,8] 解释：342 + 465 &#x3D; 807. 示例 2：</p>
<p>输入：l1 &#x3D; [0], l2 &#x3D; [0] 输出：[0] 示例 3：</p>
<p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9] 输出：[8,9,9,9,0,0,0,1] 提示：</p>
<p>每个链表中的节点数在范围 [1, 100] 内 0 &lt;&#x3D; Node.val &lt;&#x3D; 9 题目数据保证列表表示的数字不含前导零 Related Topics 递归 链表 数学</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>, val = <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>, top = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            val = (l1.val + l2.val + carry) % <span class="number">10</span>;</span><br><span class="line">            carry = (l1.val + l2.val + carry) / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">                top = result;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">                result.next = next;</span><br><span class="line">                result = next;</span><br><span class="line">            &#125;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            val = (l1.val + carry) % <span class="number">10</span>;</span><br><span class="line">            carry = (l1.val + carry) / <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">            result.next = node;</span><br><span class="line">            result = node;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            val = (l2.val + carry) % <span class="number">10</span>;</span><br><span class="line">            carry = (l2.val + carry) / <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">            result.next = node;</span><br><span class="line">            result = node;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">            result.next = node;</span><br><span class="line">            result = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>20.有效的括号【简单】</title>
    <url>/posts/2b15e74d/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>每个右括号都有一个对应的相同类型的左括号。</li>
</ol>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li>
</ul>
<p>Related Topics</p>
<p>栈</p>
<p>字符串</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="go实现"><a href="#go实现" class="headerlink" title="go实现"></a>go实现</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(s)</span><br><span class="line">	<span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	p := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">byte</span> &#123;</span><br><span class="line">		<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	stack := []<span class="type">byte</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i ++ &#123;</span><br><span class="line">		<span class="comment">// 存在, 说明这个字符是要移除 堆栈 里的数据</span></span><br><span class="line">		<span class="keyword">if</span> p[s[i]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || stack[<span class="built_in">len</span>(stack) - <span class="number">1</span>] != p[s[i]] &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">			stack = stack[:<span class="built_in">len</span>(stack) - <span class="number">1</span>]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, s[i])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>3.无重复字符的最长子串【中等】</title>
    <url>/posts/2e9c7a38/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p>Related Topics</p>
<p>哈希表</p>
<p>字符串</p>
<p>滑动窗口</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Set&lt;Character&gt; occ = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();     <span class="comment">// 字符串的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rk</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 右指针的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 字符串最大的无重复长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                occ.remove(s.charAt(i - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// rk 右指针 &lt; n   &amp;&amp; occ 不含有 s.charAt(rk)</span></span><br><span class="line">            <span class="keyword">while</span> (rk  &lt; n  &amp;&amp; !occ.contains(s.charAt(rk))) &#123;</span><br><span class="line">                occ.add(s.charAt(rk));</span><br><span class="line">                ++rk;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = ans &gt; (rk - i) ? ans : (rk - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>5.最长回文子串【中等】</title>
    <url>/posts/94d737b/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母组成</li>
</ul>
<p>Related Topics</p>
<p>字符串</p>
<p>动态规划</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span>  <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">            <span class="comment">// 中间值为1个，如：aba</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);</span><br><span class="line">            <span class="comment">// 中间值为2个，如：abba</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> len1 &gt; len2 ? len1 : len2;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">                                        </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> left, R = right;</span><br><span class="line">        <span class="keyword">while</span> (L &gt;=<span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">            L --;</span><br><span class="line">            R ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>53.最大子数组和【中等】</title>
    <url>/posts/430b3eee/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>子数组 是数组中的一个连续部分。</p>
<p>示例 1：</p>
<p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。 示例 2：</p>
<p>输入：nums &#x3D; [1] 输出：1 示例 3：</p>
<p>输入：nums &#x3D; [5,4,-1,7,8] 输出：23 提示：</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105 -104 &lt;&#x3D; nums[i] &lt;&#x3D; 104 进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>
<p>Related Topics 数组 分治 动态规划</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        f[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; nums.length; j ++) &#123;</span><br><span class="line">            f[j] = Math.max(f[j - <span class="number">1</span>], <span class="number">0</span>) + nums[j];</span><br><span class="line"></span><br><span class="line">            result = Math.max(f[j], result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>9.回文数【简单】</title>
    <url>/posts/a7884dee/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ul>
<li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li>
</ul>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= x &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能不将整数转为字符串来解决这个问题吗？</p>
<p>Related Topics</p>
<p>数学</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">revertedNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>7.整数反转【中等】</title>
    <url>/posts/13a6e543/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−231, 231 − 1]</code> ，就返回 0。</p>
<p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 4：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= x &lt;= 231 - 1</code></li>
</ul>
<p>Related Topics</p>
<p>数学</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (res &gt; Integer.MAX_VALUE / <span class="number">10</span> || (res == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res &lt; Integer.MIN_VALUE / <span class="number">10</span> || (res == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * <span class="number">10</span> + pop;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis源码分析-Mybatis配置解析</title>
    <url>/posts/eefcce7c/</url>
    <content><![CDATA[<p>​	Mybatis 有两个核心配置，全局配置会影响 Mybatis 的执行；Mapper 配置定义了查询的 SQL，下面我们来看看 Mybatis 是如何加载配置文件的。</p>
<p>​	准备案例进行分析，主要示例代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 加载配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 SqlSessionFactory</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">        .build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 SqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 查询用户</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectUserById(<span class="string">&quot;101&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-构建-SqlSessionFactory-对象"><a href="#1-构建-SqlSessionFactory-对象" class="headerlink" title="1. 构建 SqlSessionFactory 对象"></a>1. 构建 SqlSessionFactory 对象</h2><p>​	构建 SqlSessionFactory 对象，其实是通过 SqlSessionFactoryBuilder 构建的，代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">        .build(inputStream);</span><br></pre></td></tr></table></figure></div>

<p>​	创建 SqlSessionFactoryBuilder 对象，然后使用建造者模式构建 SqlSessionFactory。建造者模式用于构建复杂对象，无需关注内部细节。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/mybatis/SqlSessionFactoryBuilder.jpg"
                      alt="image-20241101162854471"
                ></p>
<p>SqlSessionFactoryBuilder 中用来创建 SqlSessionFactory 对象的方法是 build()，build() 方法有 9 个重载，可以用不同的方法来创建 SqlSessionFactory 对象。<strong>SqlSessionFactory 对象默认是单例的</strong>。</p>
<p>SqlSessionFactoryBuilder#build() 核心代码（删减）：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 XML 配置解析器 XMLConfigBuilder: 将配置文件加载到内存中并生成一个 document 对象, 同时初始化 Configuration 对象</span></span><br><span class="line">    <span class="type">XMLConfigBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLConfigBuilder</span>(inputStream, environment, properties);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解析配置并创建 SqlSessionFactory 对象</span></span><br><span class="line">    <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-创建-XMLConfigBuilder-对象"><a href="#2-创建-XMLConfigBuilder-对象" class="headerlink" title="2. 创建 XMLConfigBuilder 对象"></a>2. 创建 XMLConfigBuilder 对象</h2><p>​	XMLConfigBuilder 对象是 BaseBuilder 的子类，用于解析全局配置文件。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/mybatis/BaseBuilder.jpg"
                      alt="BaseBuilder"
                ></p>
<p>BaseBuilder 主要处理解析工作，类图如上所示。主要的子类及解析功能如下：</p>
<ul>
<li><code>XMLMapperBuilder</code>：解析 Mapper 映射器。</li>
<li><code>XMLStatementBuilder</code>：解析 select、update、insert、delete 标签里的 SQL 语句。</li>
<li><code>XMLScriptBuilder</code>：解析动态 SQL。</li>
<li><code>XMLConfigBuilder</code>：解析 mybatis-config.xml 配置文件 或 全局配置文件。</li>
</ul>
<h3 id="2-1-XMLConfigBuilder-初始化"><a href="#2-1-XMLConfigBuilder-初始化" class="headerlink" title="2.1 XMLConfigBuilder 初始化"></a>2.1 XMLConfigBuilder 初始化</h3><p>​	上面的其他三个解析处理类将在后续执行流程中会提及，先看下 XMLConfigBuilder 对象在初始化时的处理。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">XMLConfigBuilder</span><span class="params">(InputStream inputStream, String environment, Properties props)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(Configuration.class, inputStream, environment, props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">XMLConfigBuilder</span><span class="params">(Class&lt;? extends Configuration&gt; configClass, InputStream inputStream, String environment,</span></span><br><span class="line"><span class="params">                        Properties props)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(configClass, <span class="keyword">new</span> <span class="title class_">XPathParser</span>(inputStream, <span class="literal">true</span>, props, <span class="keyword">new</span> <span class="title class_">XMLMapperEntityResolver</span>()), environment, props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终执行的构造函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">XMLConfigBuilder</span><span class="params">(Class&lt;? extends Configuration&gt; configClass, XPathParser parser, String environment,</span></span><br><span class="line"><span class="params">                         Properties props)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用父类构造函数, 初始化 configuration 对象</span></span><br><span class="line">    <span class="built_in">super</span>(newConfig(configClass));</span><br><span class="line">    ErrorContext.instance().resource(<span class="string">&quot;SQL Mapper Configuration&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 Properties 全部设置到 configuration 对象中</span></span><br><span class="line">    <span class="built_in">this</span>.configuration.setVariables(props);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置是否解析的标志为 false</span></span><br><span class="line">    <span class="built_in">this</span>.parsed = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化 environment</span></span><br><span class="line">    <span class="built_in">this</span>.environment = environment;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化解析器</span></span><br><span class="line">    <span class="built_in">this</span>.parser = parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-1-1-XPathParser-初始化"><a href="#2-1-1-XPathParser-初始化" class="headerlink" title="2.1.1 XPathParser 初始化"></a>2.1.1 XPathParser 初始化</h4><p>​	XPathParser 实际上是 Mybatis 全局配置文件解析器。XPathParser#XPathParser() 核心代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// XPathParser 构造函数, XPath 对象为 XPathFactory 对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">XPathParser</span><span class="params">(InputStream inputStream, <span class="type">boolean</span> validation, Properties variables)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化 XPathParser 相关属性</span></span><br><span class="line">    commonConstructor(validation, variables, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 初始化 document, DocumentBuilderFactory 对象</span></span><br><span class="line">    <span class="built_in">this</span>.document = createDocument(<span class="keyword">new</span> <span class="title class_">InputSource</span>(inputStream));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">commonConstructor</span><span class="params">(<span class="type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.validation = validation;</span><br><span class="line">    <span class="built_in">this</span>.entityResolver = entityResolver;</span><br><span class="line">    <span class="built_in">this</span>.variables = variables;</span><br><span class="line">    <span class="type">XPathFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XPathFactory.newInstance();</span><br><span class="line">    <span class="built_in">this</span>.xpath = factory.newXPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="2-1-2-Configuration-初始化"><a href="#2-1-2-Configuration-初始化" class="headerlink" title="2.1.2 Configuration 初始化"></a>2.1.2 Configuration 初始化</h4><p>​	Configuration 初始化时，Configuration#Configuration() 构造函数代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Configuration</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化别名注册器</span></span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;JDBC&quot;</span>, JdbcTransactionFactory.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;MANAGED&quot;</span>, ManagedTransactionFactory.class);</span><br><span class="line"></span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;JNDI&quot;</span>, JndiDataSourceFactory.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;POOLED&quot;</span>, PooledDataSourceFactory.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;UNPOOLED&quot;</span>, UnpooledDataSourceFactory.class);</span><br><span class="line"></span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;PERPETUAL&quot;</span>, PerpetualCache.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;FIFO&quot;</span>, FifoCache.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;LRU&quot;</span>, LruCache.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;SOFT&quot;</span>, SoftCache.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;WEAK&quot;</span>, WeakCache.class);</span><br><span class="line"></span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;DB_VENDOR&quot;</span>, VendorDatabaseIdProvider.class);</span><br><span class="line"></span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;XML&quot;</span>, XMLLanguageDriver.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;RAW&quot;</span>, RawLanguageDriver.class);</span><br><span class="line"></span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;SLF4J&quot;</span>, Slf4jImpl.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;COMMONS_LOGGING&quot;</span>, JakartaCommonsLoggingImpl.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;LOG4J&quot;</span>, Log4jImpl.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;LOG4J2&quot;</span>, Log4j2Impl.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;JDK_LOGGING&quot;</span>, Jdk14LoggingImpl.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;STDOUT_LOGGING&quot;</span>, StdOutImpl.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;NO_LOGGING&quot;</span>, NoLoggingImpl.class);</span><br><span class="line"></span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;CGLIB&quot;</span>, CglibProxyFactory.class);</span><br><span class="line">    typeAliasRegistry.registerAlias(<span class="string">&quot;JAVASSIST&quot;</span>, JavassistProxyFactory.class);</span><br><span class="line"></span><br><span class="line">    languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);</span><br><span class="line">    languageRegistry.register(RawLanguageDriver.class);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>Configuration 初始化完成类型别名的注册工作。</p>
<h4 id="2-1-3-总结"><a href="#2-1-3-总结" class="headerlink" title="2.1.3 总结"></a>2.1.3 总结</h4><p>​	通过上述的分析可以看到 XMLConfiguration 完成了 XML 文件的解析对应 XPathParser 和 Configuration 对象的初始化操作，下面来看下 parse() 方法到底是如何解析配置文件的。</p>
<h3 id="2-2-配置文件解析"><a href="#2-2-配置文件解析" class="headerlink" title="2.2 配置文件解析"></a>2.2 配置文件解析</h3><p>​	XMLConfiguration#parse() 方法具体解析配置文件，最终将配置文件解析成 Configuration 对象。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置内容解析成 Configuration 对象并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Configuration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Configuration <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否已经解析过, 若已经解析过了则抛出异常, 根据 parsed 变量的值判断是否已经完成了对 mybatis-confgi.xml 配置文件的解析</span></span><br><span class="line">    <span class="keyword">if</span> (parsed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Each XMLConfigBuilder can only be used once.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析标识设置为已解析</span></span><br><span class="line">    parsed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 mybatis-config.xml 配置文件中查找根节点 configuration 标签, 并开始解析</span></span><br><span class="line">    parseConfiguration(parser.evalNode(<span class="string">&quot;/configuration&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回解析</span></span><br><span class="line">    <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>解析全局配置文件 configuration 根标签下的内容，XMLConfiguration#parseConfiguration() 核心代码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解析全局配置文件 configuration 根标签下的内容, XMLConfiguration#parseConfiguration() 方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseConfiguration</span><span class="params">(XNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// issue #117 read properties first</span></span><br><span class="line">        <span class="comment">// 解析 properties 标签元素</span></span><br><span class="line">        propertiesElement(root.evalNode(<span class="string">&quot;properties&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 settings 标签元素</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">settings</span> <span class="operator">=</span> settingsAsProperties(root.evalNode(<span class="string">&quot;settings&quot;</span>));</span><br><span class="line">        <span class="comment">// 文件读取</span></span><br><span class="line">        loadCustomVfsImpl(settings);</span><br><span class="line">        <span class="comment">// 设置日志信息</span></span><br><span class="line">        loadCustomLogImpl(settings);</span><br><span class="line">        <span class="comment">// 解析 typeAliases 标签元素</span></span><br><span class="line">        typeAliasesElement(root.evalNode(<span class="string">&quot;typeAliases&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 plugins 标签元素, 插件</span></span><br><span class="line">        pluginsElement(root.evalNode(<span class="string">&quot;plugins&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 objectFactory 标签元素, 对象工厂</span></span><br><span class="line">        objectFactoryElement(root.evalNode(<span class="string">&quot;objectFactory&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 objectWrapperFactory 标签元素, 对象包装工厂</span></span><br><span class="line">        objectWrapperFactoryElement(root.evalNode(<span class="string">&quot;objectWrapperFactory&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 reflectorFactory 标签元素, 反射工厂</span></span><br><span class="line">        reflectorFactoryElement(root.evalNode(<span class="string">&quot;reflectorFactory&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// settings 子标签赋值, 若未配置, 使用默认值</span></span><br><span class="line">        settingsElement(settings);</span><br><span class="line">        <span class="comment">// 解析 environments 标签元素, 数据库连接信息创建</span></span><br><span class="line">        <span class="comment">// read it after objectFactory and objectWrapperFactory issue #631</span></span><br><span class="line">        environmentsElement(root.evalNode(<span class="string">&quot;environments&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 databaseIdProvider 标签元素</span></span><br><span class="line">        databaseIdProviderElement(root.evalNode(<span class="string">&quot;databaseIdProvider&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 typeHandlers 标签元素, 类型处理器</span></span><br><span class="line">        typeHandlersElement(root.evalNode(<span class="string">&quot;typeHandlers&quot;</span>));</span><br><span class="line">        <span class="comment">// 解析 mappers 标签元素, mapper</span></span><br><span class="line">        mappersElement(root.evalNode(<span class="string">&quot;mappers&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 解析 xml 配置失败, 抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven插件之git-commit-id-plugin</title>
    <url>/posts/3c9f261d/</url>
    <content><![CDATA[<h2 id="引入-git-commit-id-plugin-插件"><a href="#引入-git-commit-id-plugin-插件" class="headerlink" title="引入 git-commit-id-plugin 插件"></a>引入 git-commit-id-plugin 插件</h2><p>在 Maven 项目的 pom.xml 中添加插件，如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.5&lt;/version&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;get-the-git-infos&lt;/id&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;revision&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;!-- 默认是 initialize 阶段执行, 可以修改为其他阶段 --&gt;</span><br><span class="line">            &lt;phase&gt;initialize&lt;/phase&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;validate-the-git-infos&lt;/id&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;validateRevision&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;!-- 默认是打包阶段执行, 可以修改为其他阶段 --&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!-- git 文件记录, 默认是 $&#123;project.basedir&#125;/.git --&gt;</span><br><span class="line">        &lt;dotGitDirectory&gt;$&#123;project.basedir&#125;/.git&lt;/dotGitDirectory&gt;</span><br><span class="line">        &lt;!-- 属性前缀, 默认是 git, 如: `$&#123;configuration-prefix&#125;.commit.id` --&gt;</span><br><span class="line">        &lt;prefix&gt;git&lt;/prefix&gt;</span><br><span class="line">        &lt;!-- 默认 false, 构建时打印信息 --&gt;</span><br><span class="line">        &lt;verbose&gt;false&lt;/verbose&gt;</span><br><span class="line">        &lt;dateFormatTimeZone&gt;Asia/Shanghai&lt;/dateFormatTimeZone&gt;</span><br><span class="line">        &lt;!-- 默认 false, 如果是 true, 会生成 properties 文件 --&gt;</span><br><span class="line">        &lt;generateGitPropertiesFile&gt;true&lt;/generateGitPropertiesFile&gt;</span><br><span class="line">        &lt;generateGitPropertiesFilename&gt;./src/main/resources/git.properties&lt;/generateGitPropertiesFilename&gt;</span><br><span class="line">        &lt;!-- 文件格式, 默认 properties, 可以使用 json; 若设置为 json, 则还需设置 `&lt;commitIdGenerationModel&gt;full&lt;/commitIdGenerationModel&gt;` --&gt;</span><br><span class="line">        &lt;format&gt;properties&lt;/format&gt;</span><br><span class="line">        &lt;!-- 可以用作非常强大的版本控制助手, 可以参考: https://git-scm.com/docs/git-describe --&gt;</span><br><span class="line">        &lt;gitDescribe&gt;</span><br><span class="line">            &lt;!-- 默认 false, 如果为 true, 则不使用该配置 --&gt;</span><br><span class="line">            &lt;skip&gt;true&lt;/skip&gt;</span><br><span class="line">            &lt;always&gt;false&lt;/always&gt;</span><br><span class="line">            &lt;dirty&gt;-dirty&lt;/dirty&gt;</span><br><span class="line">        &lt;/gitDescribe&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></div>

<p>通过 <code>mvn package</code> 打包后，会在 <code>resources</code>下生成 <code>git.properties</code> 文件，在项目启动类中读取配置中的信息打印至控制台。代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gitCommitInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathResource</span> <span class="variable">classPathResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;git.properties&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(classPathResource);</span><br><span class="line">        log.info(<span class="string">&quot;git.commit.id=&#123;&#125;&quot;</span>, properties.getProperty(<span class="string">&quot;git.commit.id&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;git.build.time=&#123;&#125;&quot;</span>, properties.getProperty(<span class="string">&quot;git.build.time&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;git.build.version=&#123;&#125;&quot;</span>, properties.getProperty(<span class="string">&quot;git.build.version&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;git.build.user.name=&#123;&#125;&quot;</span>, properties.getProperty(<span class="string">&quot;git.build.user.name&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;resolver git.properties failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis源码分析-项目目录</title>
    <url>/posts/8f03cf8e/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><blockquote>
<p>为了让我们更清晰了解 Mybatis 的整体结构，本文主要分享一下关于 Mybatis 的项目结构。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/mybatis/mybatis%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"
                      alt="mybatis项目结构"
                ></p>
<h2 id="2-整体结构"><a href="#2-整体结构" class="headerlink" title="2. 整体结构"></a>2. 整体结构</h2><blockquote>
<p>Mybatis 的整体结构分为三层：</p>
<ol>
<li>基础支持层：负责 Mybatis 与数据库连接方式管理、管理方式、缓存管理、配置文件加载。</li>
<li>核心处理层：负责参数解析与参数绑定、sql 解析、结果映射的解析与处理</li>
<li>接口层：核心是 SqlSession 接口，该接口中定义了 Mybatis 暴露给应用程序调用的 API</li>
</ol>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/mybatis/mybatis%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.jpg"
                      alt="mybatis整体架构"
                ></p>
<h3 id="3-1-基础支持层"><a href="#3-1-基础支持层" class="headerlink" title="3.1 基础支持层"></a>3.1 基础支持层</h3><h4 id="3-1-1-反射模块"><a href="#3-1-1-反射模块" class="headerlink" title="3.1.1 反射模块"></a>3.1.1 反射模块</h4><blockquote>
<p>该模块对 Java 原生的反射进行了良好的封装，提供了更加<strong>简洁易用的 API</strong>，方便上层调用，并且对反射操作进行了一系列优化。</p>
</blockquote>
<p>项目包路径：<code>org/apache/ibatis/reflection</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/mybatis/%E5%8F%8D%E5%B0%84%E6%A8%A1%E5%9D%97%E5%8C%85%E8%B7%AF%E5%BE%84.jpg"
                      alt="反射模块包路径"
                ></p>
<h4 id="3-1-2-类型模块"><a href="#3-1-2-类型模块" class="headerlink" title="3.1.2 类型模块"></a>3.1.2 类型模块</h4><blockquote>
<p>类型模块提供了别名机制，这也是该模块的主要功能</p>
<p>类型模块实现了 JDBC 类型与 JAVA 类型的转换：</p>
<ul>
<li>在为 SQL 语句绑定实参时，会将数据由 Java 类型转换成 JDBC 类型。</li>
<li>而在映射结果集时，会将数据由 JDBC 类型转换成 Java 类型。</li>
</ul>
</blockquote>
<p>项目包路径：<code>org/apache/ibatis/type</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/mybatis/%E7%B1%BB%E5%9E%8B%E6%A8%A1%E5%9D%97%E5%8C%85%E8%B7%AF%E5%BE%84.jpg"
                      alt="类型模块包路径"
                ></p>
<h4 id="3-1-3-日志模块"><a href="#3-1-3-日志模块" class="headerlink" title="3.1.3 日志模块"></a>3.1.3 日志模块</h4><blockquote>
<p>Mybatis 可以详细的输入日志信息，同时还可以集成多种日志框架，例如 Log4j、Slf4j 等</p>
</blockquote>
<p>项目包路径：<code>org/apache/ibatis/type</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/mybatis/%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97%E5%8C%85%E8%B7%AF%E5%BE%84.jpg"
                      alt="日志模块包路径"
                ></p>
]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Semi Join(半连接)解析</title>
    <url>/posts/5341e1d9/</url>
    <content><![CDATA[<p>​	Semi Join(半连接)是 MySQL 优化子查询执行的核心技术之一，它通过特殊算法只检查存在性而不获取完整的结果集，显著提升了包含子查询的 SQL 性能。下面我将从多个维度深入剖析 Semi Join 的原理与实现。</p>
<h2 id="一、Semi-Join-的本质特征"><a href="#一、Semi-Join-的本质特征" class="headerlink" title="一、Semi Join 的本质特征"></a>一、Semi Join 的本质特征</h2><p><strong>1.存在性检查</strong></p>
<ul>
<li>只判断外层表行是否在子查询结果集中存在匹配</li>
<li>不关心匹配数量（1次或多次都视为存在）</li>
<li>不获取子查询的任何实际数据</li>
</ul>
<p><strong>2.结果集特性</strong></p>
<ul>
<li>结果集仅包含外层表的列</li>
<li>每行外层数据最多出现一次（即使子查询有多次匹配）</li>
</ul>
<p><strong>3.与常规连接的区别</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 常规 INNER JOIN （会返回两表匹配行）</span></span><br><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span> <span class="keyword">FROM</span> orders o <span class="keyword">INNER</span> <span class="keyword">JOIN</span> customers c <span class="keyword">ON</span> c.ID <span class="operator">=</span> o.CUST_ID;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Semi Join（只检查存在性）</span></span><br><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span> <span class="keyword">FROM</span> orders o <span class="keyword">WHERE</span> o.CUST_ID <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> customers);</span><br></pre></td></tr></table></figure></div>

<h2 id="二、Semi-Join-的触发场景"><a href="#二、Semi-Join-的触发场景" class="headerlink" title="二、Semi Join 的触发场景"></a>二、Semi Join 的触发场景</h2><h3 id="1-语法形式触发"><a href="#1-语法形式触发" class="headerlink" title="1. 语法形式触发"></a>1. 语法形式触发</h3><ul>
<li>IN 子查询：</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> x <span class="keyword">IN</span> (<span class="keyword">SELECT</span> y <span class="keyword">FROM</span> B);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>EXISTS 子查询：</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> B.y <span class="operator">=</span> A.x);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>某些比较操作：</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> x <span class="operator">&gt;</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> y <span class="keyword">FROM</span> B);</span><br></pre></td></tr></table></figure></div>

<h3 id="2-优化器自动转换"><a href="#2-优化器自动转换" class="headerlink" title="2. 优化器自动转换"></a>2. 优化器自动转换</h3><p>MySQL 优化器会将某些子查询自动重写为 Semi Join 执行计划，即使 SQL 语句没有显示使用 IN&#x2F;EXISTS 语法。</p>
<h2 id="三、Semi-Join-的五种执行策略"><a href="#三、Semi-Join-的五种执行策略" class="headerlink" title="三、Semi Join 的五种执行策略"></a>三、Semi Join 的五种执行策略</h2><p>MySQL 实现了多重 Semi Join 算法，优化器会根据成本选择最优方案：</p>
<h3 id="1-Table-Pullout-子查询表提升"><a href="#1-Table-Pullout-子查询表提升" class="headerlink" title="1. Table Pullout(子查询表提升)"></a>1. Table Pullout(子查询表提升)</h3><p><strong>适用场景：</strong>子查询只引用一个表且简单</p>
<p><strong>执行过程：</strong></p>
<ol>
<li>将子查询表提升到外层查询</li>
<li>转换为普通 JOIN 操作</li>
</ol>
<p><strong>示例转换：</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 原始查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> status<span class="operator">=</span><span class="string">&#x27;active&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 优化后</span></span><br><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span> <span class="keyword">FROM</span> orders o <span class="keyword">JOIN</span> customers c <span class="keyword">ON</span> c.id <span class="operator">=</span> o.cust_id <span class="keyword">WHERE</span> c.status<span class="operator">=</span><span class="string">&#x27;active&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-Duplicate-Weedout-重复消除"><a href="#2-Duplicate-Weedout-重复消除" class="headerlink" title="2. Duplicate Weedout(重复消除)"></a>2. Duplicate Weedout(重复消除)</h3><p><strong>适用场景：</strong>子查询可能有多次匹配</p>
<p><strong>执行过程：</strong></p>
<ol>
<li>先执行子查询获取结果集</li>
<li>在外层查询中使用临时表记录已匹配的外层行</li>
<li>过滤掉重复匹配</li>
</ol>
<p><strong>特定：</strong></p>
<ul>
<li>需要维护临时表记录匹配状态</li>
<li>适用于子查询结果集较小的情况</li>
</ul>
<h3 id="3-Loose-Scan-松散扫描"><a href="#3-Loose-Scan-松散扫描" class="headerlink" title="3. Loose Scan(松散扫描)"></a>3. Loose Scan(松散扫描)</h3><p><strong>适用场景：</strong>子查询列有索引且基数高</p>
<p><strong>执行过程：</strong></p>
<ol>
<li>利用索引跳跃扫描</li>
<li>只检查索引中是否存在匹配值</li>
<li>不需要读取完整的子查询数据</li>
</ol>
<p><strong>优势：</strong></p>
<ul>
<li>极大减少 I&#x2F;O 操作</li>
<li>适合高选择性列</li>
</ul>
<h2 id="4-Materialization-物化"><a href="#4-Materialization-物化" class="headerlink" title="4. Materialization(物化)"></a>4. Materialization(物化)</h2><p><strong>适用场景：</strong>子查询复杂或无合适索引</p>
<p><strong>执行过程：</strong></p>
<ol>
<li>将子查询结果物化为临时表</li>
<li>在临时表上建立索引</li>
<li>执行半连接操作</li>
</ol>
<p><strong>特点：</strong></p>
<p>物化成本较高</p>
<p>适合子查询执行代价大的情况</p>
<h2 id="5-FirstMatch-首次匹配"><a href="#5-FirstMatch-首次匹配" class="headerlink" title="5. FirstMatch(首次匹配)"></a>5. FirstMatch(首次匹配)</h2><p><strong>适用场景：</strong>子查询可能有多次匹配但只需要确认存在性</p>
<p><strong>执行过程：</strong></p>
<ol>
<li>对外层表每行，扫描子查询直到找到第一个匹配</li>
<li>找到即停止，不继续检查剩余匹配</li>
</ol>
<p><strong>优势：</strong></p>
<ul>
<li>平均情况下减少子查询执行次数</li>
<li>适合子查询匹配分布不均匀的情况</li>
</ul>
<h2 id="四、执行计划解读"><a href="#四、执行计划解读" class="headerlink" title="四、执行计划解读"></a>四、执行计划解读</h2><p>在 EXPLAIN 输出中识别 Semi Join：</p>
<h3 id="1-关键标识："><a href="#1-关键标识：" class="headerlink" title="1. 关键标识："></a>1. 关键标识：</h3><ul>
<li>Extra 列显示”Using semi join”</li>
<li>可能伴随其他子策略提示如”Using duplicate weedout”</li>
</ul>
<h3 id="2-执行计划示例"><a href="#2-执行计划示例" class="headerlink" title="2.执行计划示例"></a>2.执行计划示例</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> orders<span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1000</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> cust  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref<span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span><span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> orders.cust_id <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index; <span class="keyword">Using</span> semi <span class="keyword">join</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-策略识别"><a href="#3-策略识别" class="headerlink" title="3. 策略识别"></a>3. 策略识别</h3><ul>
<li>“Using semi join”表明使用了半连接优化</li>
<li>结合其他 Extra 信息可判断具体策略（如”Using duplicate weedout”）</li>
</ul>
<h2 id="五、性能优化建议"><a href="#五、性能优化建议" class="headerlink" title="五、性能优化建议"></a>五、性能优化建议</h2><h3 id="1-索引优化"><a href="#1-索引优化" class="headerlink" title="1. 索引优化"></a>1. 索引优化</h3><ul>
<li>确保子查询连接列有适当索引</li>
<li>复合索引需考虑列顺序</li>
</ul>
<h3 id="2-查询重写"><a href="#2-查询重写" class="headerlink" title="2. 查询重写"></a>2. 查询重写</h3><ul>
<li>将复杂子查询改写为 JOIN 形式</li>
<li>使用 EXISTS 替代 IN （或反之）看哪种更高效</li>
</ul>
<h3 id="3-统计信息更新"><a href="#3-统计信息更新" class="headerlink" title="3. 统计信息更新"></a>3. 统计信息更新</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">ANALYZE <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>确保优化器有准确的基数统计</li>
</ul>
<h3 id="4-监控与调优"><a href="#4-监控与调优" class="headerlink" title="4. 监控与调优"></a>4. 监控与调优</h3><ul>
<li>使用 EXPLAIN ANALYZE(MySQL 8.0+) 查看实际执行情况</li>
<li>关注临时表使用情况</li>
</ul>
<h2 id="六、Semi-Join-的局限性与注意事项"><a href="#六、Semi-Join-的局限性与注意事项" class="headerlink" title="六、Semi Join 的局限性与注意事项"></a>六、Semi Join 的局限性与注意事项</h2><h3 id="1-不支持的情况"><a href="#1-不支持的情况" class="headerlink" title="1. 不支持的情况"></a>1. 不支持的情况</h3><ul>
<li>子查询包含 GROUP BY、HAVING 或聚合函数</li>
<li>子查询返回多列（某些情况下）</li>
<li>特定类型的比较操作</li>
</ul>
<h3 id="2-可能退化为其他执行计划"><a href="#2-可能退化为其他执行计划" class="headerlink" title="2. 可能退化为其他执行计划"></a>2. 可能退化为其他执行计划</h3><ul>
<li>当优化器认为其他方案成本更低时</li>
<li>数据分布不符合预期时</li>
</ul>
<h3 id="3-版本差异"><a href="#3-版本差异" class="headerlink" title="3. 版本差异"></a>3. 版本差异</h3><ul>
<li>不同 MySQL 版本支持的 Semi Join 策略可能不同</li>
<li>MySQL 8.0 对 Semi Join 有更多优化</li>
</ul>
<p>​	Semi Join 是 MySQL 查询优化器的重要创新，深入理解其原理和实现有助于编写更高效的 SQL 语句，特别是在处理复杂子查询时。实际应用中应结合 EXPLAIN 分析，选择最合适的查询写法。</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL双写缓冲区（Doublewrite Buffer）深入解析</title>
    <url>/posts/280966a6/</url>
    <content><![CDATA[<h2 id="1、什么是-Double-write-Buffer"><a href="#1、什么是-Double-write-Buffer" class="headerlink" title="1、什么是 Double write Buffer"></a>1、什么是 Double write Buffer</h2><p>​	Doublewrite Buffer 是 MySQL 数据库中 InnoDB 存储引擎的一种机制，用于解决部分写失效的问题，提高数据完整性和可靠性。Doublewrite Buffer 是内存 + 磁盘的结构，包括内存结构和磁盘结构两个部分。</p>
<ul>
<li>在内存结构中，Doublewrite Buffer 由 128 个页（Page）构成，大小是 2MB（128*16KB）。这些页在内存中以 Doublewrite Buffer 的形式存在。</li>
<li>在磁盘结构中，Doublewrite Buffer 在系统表空间上是 128 个页（2个区，extend1 和 extend2），大小也是 2MB。这些页在磁盘上以 Doublewrite File 的形式存在。</li>
</ul>
<p>Doublewrite Buffer 的原理是在将数据页写到数据文件之前，先将它们写入 Doublewrite Buffer 的共享表空间内。在完成写入 Doublewrite Buffer 后，再将数据页写入到数据文件的适当位置。这种方式可以确保数据的一致性和完整性，因为在写入过程中发生意外崩溃时，可以从 Doublewrite Buffer 中找到完好的数据页副本用于恢复。</p>
<p>![image-20250715103633520](..&#x2F;..&#x2F;images&#x2F;articles&#x2F;mysql&#x2F;doublewrite buffer.png)</p>
<p>​	当有数据页要被写入数据文件时，首先将页数据通过 memcpy 函数拷贝至内存中的 Doublewrite Buffer中。然后，Doublewrite Buffer 的内存中的数据页会刷写到 Doublewrite Buffer 的磁盘上，分两次写入磁盘共享表空间中（连续存储，顺序写，性能很高），每次写 1MB。完成 Doublewrite 页的写入之后，再将内存中的 Doublewrite Buffer 中的页写入到自己的表空间文件中。</p>
<p>​	通过这种方式，至少在两次写操作中，数据文件和 Doublewrite Buffer 文件中至少有一份数据是正确无误的。如果写磁盘过程发生了崩溃，那么 MySQL 重启时可以通过校验和来确认是否有错误数据，如果 Doublewrite Buffer 文件错误了，就从数据文件中拉取原始数据根据 redo log 得出正确的目标数据，而如果数据文件错误了，则将 Doublewrite Buffer 中的数据重新写入数据文件。</p>
<h2 id="2、Doublewrite-Buffer-工作流程"><a href="#2、Doublewrite-Buffer-工作流程" class="headerlink" title="2、Doublewrite Buffer 工作流程"></a>2、Doublewrite Buffer 工作流程</h2><ol>
<li><strong>写操作触发：</strong>当执行 INSERT、UPDATE 或 DELETE 等写操作时，MySQL 首先将数据写入双写缓冲区。</li>
<li><strong>同步到 Doublewrite File：</strong>随后，双写缓冲区中的数据被同步（flush）到 Doublewrite File 中。这个过程是由后台线程完成的，以确保数据的持久性。</li>
<li><strong>实际数据写入：</strong>一旦 Doublewrite File 中的数据被确认已经写入磁盘，MySQL 就可以将这些数据写入实际的数据文件中。</li>
<li><strong>恢复机制：</strong>如果在写操作过程中发生故障，MySQL 可以从 Doublewrite File 中恢复数据。由于 Doublewrite File 中的数据是完整的，因此可以用来修复损坏的数据文件，确保数据的完整性和一致性。</li>
</ol>
<h2 id="3、为什么需要-Doublewrite-Buffer"><a href="#3、为什么需要-Doublewrite-Buffer" class="headerlink" title="3、为什么需要 Doublewrite Buffer"></a>3、为什么需要 Doublewrite Buffer</h2><p>​	从 MySQL 页（Page）和 Linux 页大小不同的角度来看，需要 Doublewrite Buffer 的原因主要是为了解决数据写入过程中的一致性和完整性问题。</p>
<p>​	首先，我们需要了解 MySQL 的页和 Linux 的页大小不同。MySQL 的页通常大小为 16KB，而 Linux 的页大小可能因系统配置而有所不同，但常见的默认大小是 4KB。这意味着，当 MySQL 写入一个页的数据时，实际上是写入了一个更大的块，这个块可能跨越了多个 Linux 页。</p>
<p><strong>考虑以下场景：</strong></p>
<p>​	假设 MySQL 正在写入一个页的数据，并且这个操作只完成了部分，比如只写了 50% 的数据。在这种情况下，如果直接将这个不完整的数据页写入数据文件，那么数据文件就会处于一个不一致的状态。某些查询可能会读取到这个不完整的数据页，导致数据损坏或不一致。</p>
<p>​	为了解决这个问题，Doublewrite Buffer 被引入。当 MySQL 写入一个数据页时，首先会将整个页写入 Doublewrite Buffer。这样，即使写操作只完成了部分，Doublewrite Buffer 中的数据仍然是完整的。然后，Doublewrite Buffer 中的数据再被同步（flush）到实际的数据文件中。这样，即使发生故障，也可以从 Doublewrite Buffer 中恢复数据，确保数据的完整性和一致性。</p>
<blockquote>
<p>综上所述，Doublewrite Buffer 的存在是为了解决由于 MySQL 页和 Linux 页大小不同导致的数据写入过程中的一致性和完整性问题。通过将数据先写入 Doublewrite Buffer，然后再同步到实际的数据文件，可以确保数据的完整性和一致性，避免因故障导致的数据损坏或不一致问题。</p>
</blockquote>
<h2 id="4、Doublewrite-Buffer-的参数"><a href="#4、Doublewrite-Buffer-的参数" class="headerlink" title="4、Doublewrite Buffer 的参数"></a>4、Doublewrite Buffer 的参数</h2><p>MySQL 的双写缓冲区可以通过以下参数进行配置：</p>
<ul>
<li><strong>innodb_doublewrite：</strong>控制是否启用双写缓冲区的参数。可以设置为 ON 或 OFF。默认为 ON。</li>
<li><strong>innodb_doublewrite_file：</strong>指定 Doublewrite File 的路径和文件名。默认值为 ib_logfile0 和 ib_logfile1。</li>
<li><strong>innodb_doublewrite_buffer_size：</strong>控制双写缓冲区大小的参数。默认值是 256KB。可以根据需要进行调整，但不应设置得过大或过小，以免影响系统性能或导致不必要的内存占用。</li>
</ul>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透（ngrok）</title>
    <url>/posts/36bbd933/</url>
    <content><![CDATA[<h2 id="一、ngrok-官网地址"><a href="#一、ngrok-官网地址" class="headerlink" title="一、ngrok 官网地址"></a>一、ngrok 官网地址</h2><p><a class="link"   href="https://ngrok.com/%EF%BC%8C%E4%BD%BF%E7%94%A8" >https://ngrok.com/，使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> github 账号登录。</p>
<h2 id="二、下载"><a href="#二、下载" class="headerlink" title="二、下载"></a>二、下载</h2><p>登录成功后下载对应软件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/ngrok/ngrok.jpg"
                      alt="image.png"
                ></p>
<h2 id="三、获取鉴权-token"><a href="#三、获取鉴权-token" class="headerlink" title="三、获取鉴权 token"></a>三、获取鉴权 token</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/ngrok/ngrok-token.jpg"
                      alt="image-20240604120711574"
                ></p>
<h2 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/ngrok/ngrok-use.jpg"
                      alt="image.png"
                ></p>
<p>安装包下载后解压，点击“ngrok.exe”文件执行。</p>
<p>执行后会弹出 DOS 命令框</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/ngrok/ngrok-help.jpg"
                      alt="image.png"
                ></p>
<ol>
<li>输入如下命令进行 token 授权</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ngrok authtoken &lt;token&gt;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>暴露服务端口</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ngrok http 10088</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/ngrok/ngrok-info.jpg"
                      alt="image.png"
                ></p>
]]></content>
      <tags>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos2.2.1源码启动</title>
    <url>/posts/89a74d17/</url>
    <content><![CDATA[<h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><ol>
<li><p>找到 Nacos 的控制台启动类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/nacos/nacos-start.png"
                      alt="image-20240419163826445"
                ></p>
</li>
<li><p>配置启动选项（默认 cluster 集群模式启动，会报错，需要将其改为 单机模式 standalone）</p>
<p>-Dnacos.standalone&#x3D;true</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/nacos/nacos-param.png"
                      alt="image-20240419164224322"
                ></p>
</li>
<li><p>修改 application.properties 配置文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 给下面两个属性随机设值</span><br><span class="line">nacos.core.auth.server.identity.key=111</span><br><span class="line">nacos.core.auth.server.identity.value=111</span><br><span class="line"></span><br><span class="line"># 打开此属性</span><br><span class="line">nacos.core.auth.plugin.nacos.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <tags>
        <tag>nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ入门教程</title>
    <url>/posts/e9bc55ba/</url>
    <content><![CDATA[<p>官网地址：<a class="link"   href="https://rocketmq.apache.org/zh/docs/introduction/02concepts" >https://rocketmq.apache.org/zh/docs/introduction/02concepts <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="主题（Topic）"><a href="#主题（Topic）" class="headerlink" title="主题（Topic）"></a>主题（Topic）</h2><p><code>主题</code>是 Apache RocketMQ 中消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息。主题通过 TopicName 来做唯一标识和区分。</p>
<h2 id="消息类型（MessageType）"><a href="#消息类型（MessageType）" class="headerlink" title="消息类型（MessageType）"></a>消息类型（MessageType）</h2><p><code>消息类型</code>是Apache RocketMQ 中按照消息传输特性的不同而定义的分类，用于类型管理和安全校验。 Apache RocketMQ 支持的消息类型有<code>普通消息</code>、<code>顺序消息</code>、<code>事务消息</code>和<code>定时/延时消息</code>。</p>
<blockquote>
<p><strong>提示</strong>：</p>
<p>Apache RocketMQ 从5.0版本开始，支持强制校验消息类型，即每个主题Topic只允许发送一种消息类型的消息，这样可以更好的运维和管理生产系统，避免混乱。但同时保证向下兼容4.x版本行为，强制校验功能默认开启。</p>
</blockquote>
<h2 id="消息队列（MessageQueue）"><a href="#消息队列（MessageQueue）" class="headerlink" title="消息队列（MessageQueue）"></a>消息队列（MessageQueue）</h2><p><code>队列</code>是 Apache RocketMQ 中消息存储和传输的实际容器，也是消息的<code>最小存储单元</code>。 Apache RocketMQ 的所有主题都是由<code>多个队列</code>组成，以此实现队列数量的水平拆分和队列内部的流式存储。队列通过QueueId来做唯一标识和区分。</p>
<h2 id="消息（Message）"><a href="#消息（Message）" class="headerlink" title="消息（Message）"></a>消息（Message）</h2><p><code>消息</code>是 Apache RocketMQ 中的<code>最小数据传输单元</code>。生产者将业务数据的负载和拓展属性包装成消息发送到服务端，服务端按照相关语义将消息投递到消费端进行消费。</p>
<h2 id="生产者（Producer）"><a href="#生产者（Producer）" class="headerlink" title="生产者（Producer）"></a>生产者（Producer）</h2><p><code>生产者</code>是Apache RocketMQ 系统中用来构建并传输消息到服务端的运行实体。生产者通常被集成在业务系统中，将业务消息按照要求封装成消息并发送至服务端。</p>
<h2 id="消费者分组（ConsumerGroup）"><a href="#消费者分组（ConsumerGroup）" class="headerlink" title="消费者分组（ConsumerGroup）"></a>消费者分组（ConsumerGroup）</h2><p><code>消费者分组</code>是Apache RocketMQ 系统中承载多个消费行为一致的消费者的负载均衡分组。和消费者不同，消费者分组并不是运行实体，而是一个逻辑资源。在 Apache RocketMQ 中，通过消费者分组内初始化多个消费者实现消费性能的水平扩展以及高可用容灾。</p>
<h2 id="消费者（Consumer）"><a href="#消费者（Consumer）" class="headerlink" title="消费者（Consumer）"></a>消费者（Consumer）</h2><p><code>消费者</code>是Apache RocketMQ 中用来接收并处理消息的运行实体。消费者通常被集成在业务系统中，从服务端获取消息，并将消息转化成业务可理解的信息，供业务逻辑处理。</p>
<h2 id="订阅关系（Subscription）"><a href="#订阅关系（Subscription）" class="headerlink" title="订阅关系（Subscription）"></a>订阅关系（Subscription）</h2><p><code>订阅关系</code>是Apache RocketMQ 系统中消费者获取消息、处理消息的规则和状态配置。订阅关系由消费者分组动态注册到服务端系统，并在后续的消息传输中按照订阅关系定义的过滤规则进行消息匹配和消费进度维护。</p>
<h2 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h2><p><code>事务消息</code>是Apache RocketMQ 提供的一种高级消息类型，支持在分布式场景下保障消息生产和本地事务的最终一致性。</p>
<h2 id="定时-延时消息"><a href="#定时-延时消息" class="headerlink" title="定时&#x2F;延时消息"></a>定时&#x2F;延时消息</h2><p><code>定时/延时消息</code>是Apache RocketMQ 提供的一种高级消息类型，消息被发送至服务端后，在指定时间后才能被消费者消费。通过设置一定的定时时间可以实现分布式场景的延时调度触发效果。</p>
<h2 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h2><p><code>顺序消息</code>是Apache RocketMQ 提供的一种高级消息类型，支持消费者按照发送消息的先后顺序获取消息，从而实现业务场景中的顺序处理。</p>
<h1 id="参数约束和建议"><a href="#参数约束和建议" class="headerlink" title="参数约束和建议"></a>参数约束和建议</h1><p>Apache RocketMQ 系统中存在很多自定义参数和资源命名，您在使用 Apache RocketMQ 时建议参考如下说明规范系统设置，避对某些具体参数设置不合理导致应用出现异常。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>建议范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Topic名称</code></td>
<td>字符建议：字母a-z或A-Z、数字0-9以及下划线（<em>）、短划线（-）和百分号（%）。<br/>长度建议：1~64个字符。<br/>系统保留字符：Topic名称不允许使用以下保留字符或含有特殊前缀的字符命名。<br/>保留字符: TBW102 *BenchmarkTest* SELF_TEST_TOPIC *OFFSET_MOVED_EVENT* SCHEDULE_TOPIC_XXXX *RMQ_SYS_TRANS_HALF_TOPIC* RMQ_SYS_TRACE_TOPIC *RMQ_SYS_TRANS_OP_HALF_TOPIC<br/>特殊前缀:* rmq_sys</em> %RETRY% <em>%DLQ%</em> rocketmq-broker-</td>
<td>Topic命名应该尽量使用简短、常用的字符，避免使用特殊字符。特殊字符会导致系统解析出现异常，字符过长可能会导致消息收发被拒绝。</td>
</tr>
<tr>
<td><code>ConsumerGroup名称</code></td>
<td>字符建议：支持字母a-z或A-Z、数字0-9以及下划线（<em>）、短划线（-）和百分号（%）。<br/>长度建议：1~64个字符。<br/>系统保留字符：ConsumerGroup不允许使用以下保留字符或含有特殊前缀的字符命名。<br/>保留字符: *DEFAULT_CONSUMER* DEFAULT_PRODUCER *TOOLS_CONSUMER* FILTERSRV_CONSUMER *__MONITOR_CONSUMER* CLIENT_INNER_PRODUCER *SELF_TEST_P_GROUP* SELF_TEST_C_GROUP *CID_ONS-HTTP-PROXY* CID_ONSAPI_PERMISSION *CID_ONSAPI_OWNER* CID_ONSAPI_PULL *CID_RMQ_SYS_TRANS* 特殊字符 * CID_RMQ_SYS</em> * CID_HOUSEKEEPING</td>
<td>无。</td>
</tr>
<tr>
<td><code>ACL Credentials</code></td>
<td>字符建议：AK（AccessKey ID）、SK（AccessKey Secret）和Token仅支持字母a-z或A-Z、数字0~9。<br/>长度建议：不超过1024个字符。</td>
<td>无。</td>
</tr>
<tr>
<td><code>请求超时时间</code></td>
<td>默认值：3000毫秒。<br/>取值范围：该参数为客户端本地行为，取值范围建议不要超过30000毫秒。</td>
<td>请求超时时间是客户端本地同步调用的等待时间，请根据实际应用设置合理的取值，避免线程阻塞时间过长。</td>
</tr>
<tr>
<td><code>消息大小</code></td>
<td>默认值：不超过4 MB。不涉及消息压缩，仅计算消息体body的大小。<br/>取值范围：建议不超过4 MB。</td>
<td>消息传输应尽量压缩和控制负载大小，避免超大文件传输。若消息大小不满足限制要求，可以尝试分割消息或使用OSS存储，用消息传输URL。</td>
</tr>
<tr>
<td><code>消息自定义属性</code></td>
<td>字符限制：所有可见字符。<br/>长度建议：属性的Key和Value总长度不超过16 KB。<br/>系统保留属性：不允许使用以下保留属性作为自定义属性的Key。 保留属性Key</td>
<td>无。</td>
</tr>
<tr>
<td><code>MessageGroup</code></td>
<td>字符限制：所有可见字符。<br/>长度建议：1~64字节。</td>
<td>MessageGroup是顺序消息的分组标识。一般设置为需要保证顺序的一组消息标识，例如订单ID、用户ID等。</td>
</tr>
<tr>
<td><code>消息发送重试次数</code></td>
<td>默认值：3次。<br/>取值范围：无限制。</td>
<td>消息发送重试是客户端SDK内置的重试策略，对应用不可见，建议取值不要过大，避免阻塞业务线程。 如果消息达到最大重试次数后还未发送成功，建议业务侧做好兜底处理，保证消息可靠性。</td>
</tr>
<tr>
<td><code>消息消费重试次数</code></td>
<td>默认值：16次。</td>
<td>消费重试次数应根据实际业务需求设置合理的参数值，避免使用重试进行无限触发。重试次数过大容易造成系统压力过量增加。</td>
</tr>
<tr>
<td><code>事务异常检查间隔</code></td>
<td>默认值：60秒。</td>
<td>事务异常检查间隔指的是，半事务消息因系统重启或异常情况导致没有提交，生产者客户端会按照该间隔时间进行事务状态回查。 间隔时长不建议设置过短，否则频繁的回查调用会影响系统性能。</td>
</tr>
<tr>
<td><code>半事务消息第一次回查时间</code></td>
<td>默认值：取值等于[事务异常检查间隔] * 最大限制：不超过1小时。</td>
<td>无。</td>
</tr>
<tr>
<td><code>半事务消息最大超时时长</code></td>
<td>默认值：4小时。 * 取值范围：不支持自定义修改。</td>
<td>半事务消息因系统重启或异常情况导致没有提交，生产者客户端会按照事务异常检查间隔时间进行回查，若超过半事务消息超时时长后没有返回结果，半事务消息将会被强制回滚。 您可以通过监控该指标避免异常事务。</td>
</tr>
<tr>
<td><code>PushConsumer本地缓存</code></td>
<td>默认值：<br/>*最大缓存数量：1024条。<br/>*最大缓存大小：64 M。<br/>取值范围：支持用户自定义设置，无限制。</td>
<td>消费者类型为PushConsumer时，为提高消费者吞吐量和性能，客户端会在SDK本地缓存部分消息。缓存的消息的数量和大小应设置在系统内存允许的范围内。</td>
</tr>
<tr>
<td><code>PushConsumer重试间隔时长</code></td>
<td>默认值：<br/>*非顺序性投递：间隔时间阶梯变化，具体取值，请参见PushConsumer消费重试策略。<br/>*顺序性投递：3000毫秒。</td>
<td>无。</td>
</tr>
<tr>
<td><code>PushConsumer消费并发度</code></td>
<td>默认值：20个线程。</td>
<td>无。</td>
</tr>
<tr>
<td><code>获取消息最大批次</code></td>
<td>默认值：32条。</td>
<td>消费者从服务端获取消息时，一次获取到最大消息条数。建议按照实际业务设置合理的参数值，一次获取消息数量过大容易在消费失败时造成大批量消息重复。</td>
</tr>
<tr>
<td><code>SimpleConsumer最大不可见时间</code></td>
<td>默认值：用户必填参数，无默认值。<br/>取值范围建议：最小10秒；最大12小时。</td>
<td>消费不可见时间指的是消息处理+失败后重试间隔的总时长，建议设置时取值比实际需要耗费的时间稍微长一些。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>rocketmq</category>
      </categories>
      <tags>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBootApplication注解</title>
    <url>/posts/b1e2d9f1/</url>
    <content><![CDATA[<h2 id="SpringBootApplication-注解"><a href="#SpringBootApplication-注解" class="headerlink" title="SpringBootApplication 注解"></a>SpringBootApplication 注解</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略...</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// exclude 属性表示哪些类需要排除掉, 等同于 EnableAutoConfiguration 类里的 exclude 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// excludeName 属性表示哪些类名称需要排除掉, 等同于 EnableAutoConfiguration 类里的 excludeName 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scanBasePackages 属性表示要扫描哪些包下的类, 等同于 ComponentScan 类里的 basePackages 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackages&quot;)</span></span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scanBasePackageClasses 属性表示要扫描哪些包下的类，等同于 ComponentScan 类里的 basePackageClasses 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackageClasses&quot;)</span></span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;nameGenerator&quot;)</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanNameGenerator</span>&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置是否生效, 默认 true, 表示要加载</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>@SpringBootApplication 注解是 Spring Boot 中的核心注解，它用于标识一个主要的 Spring Boot 应用程序类。</p>
<p>该注解是一个复合注解，包含：@ComponentScan、@SpringBootConfigure、@EnableAuthConfigure 注解。</p>
<h2 id="ComponentScan-注解"><a href="#ComponentScan-注解" class="headerlink" title="@ComponentScan 注解"></a>@ComponentScan 注解</h2><p>扫描路径为当前解析这个类所在的包路径。</p>
<h2 id="EnableAutoConfigure-注解"><a href="#EnableAutoConfigure-注解" class="headerlink" title="@EnableAutoConfigure 注解"></a>@EnableAutoConfigure 注解</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 ...</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个注解会负责进行自动配置类的导入，也就是将项目中的配置类自动导入到 Spring 容器中，从而得到解析。</p>
<h2 id="SpringBootConfigure-注解"><a href="#SpringBootConfigure-注解" class="headerlink" title="@SpringBootConfigure 注解"></a>@SpringBootConfigure 注解</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 ...</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>相当于 <strong>@Configuration</strong> 注解，表示当前类是个配置类。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中使用Vim</title>
    <url>/posts/bc44723c/</url>
    <content><![CDATA[<h2 id="一、IDea-中安装-Vim-插件"><a href="#一、IDea-中安装-Vim-插件" class="headerlink" title="一、IDea 中安装 Vim 插件"></a>一、IDea 中安装 Vim 插件</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/idea-setting.png"
                      alt="image-20240530104021464"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/idea-plugin.jpg"
                      alt="image-20240530104213244"
                ></p>
<p>在 IDEA 中安装如下三个插件：</p>
<ul>
<li>IdeaVim</li>
<li>IdeaVimExtension</li>
<li>IdeaVim-EasyMotion</li>
</ul>
<blockquote>
<p>当你的光标变成了小方块后，说明你的 vim 插件安装好了~</p>
</blockquote>
<h2 id="二、Vim-的使用"><a href="#二、Vim-的使用" class="headerlink" title="二、Vim 的使用"></a>二、Vim 的使用</h2><h3 id="1-进入插入模式"><a href="#1-进入插入模式" class="headerlink" title="1. 进入插入模式"></a>1. 进入插入模式</h3><p>按下【i, I, o, O, a, A, r, R】等任何一个字母后进入编辑模式。这时候 IDEA 右下方合会出现 【INSERT】的字样，此时才可以进行编辑。按【ESC】即可退出编辑模式。</p>
<ul>
<li>a 在光标后，进入插入模式；</li>
<li>A 在本行结尾，进入插入模式；</li>
<li>i 在光标前，进入插入模式；</li>
<li>I 在本行开头，进入插入模式；</li>
<li>o 在本行之后新增一行，并进入插入模式；</li>
<li>O 在本行之前新增一行，并进入插入模式；</li>
<li>s 删除当前字符，并进入插入模式；</li>
<li>S 删除当前行中的所有文本，并进入插入模式；</li>
</ul>
<h3 id="2-移动光标"><a href="#2-移动光标" class="headerlink" title="2. 移动光标"></a>2. 移动光标</h3><p>【h、j、k、l】，分别控制光标左、下、上、右移一个。</p>
<h3 id="3-复制-粘贴"><a href="#3-复制-粘贴" class="headerlink" title="3. 复制 &amp; 粘贴"></a>3. 复制 &amp; 粘贴</h3><ul>
<li>yy：复制光标所在行</li>
<li>nyy：复制光标所在向下 n 行</li>
<li>y1G：复制光标所在行到第一行的所有数据</li>
<li>yG：复制光标所在行到最后一行的所有数据</li>
<li>y0：复制光标所在的那个字符到该行行首的所有数据</li>
<li>y$：复制光标所在的那个字符到该行行尾的所有数据</li>
<li>p：将已复制的数据在光标下一行粘贴上</li>
<li>P：将已复制的数据在光标上一行粘贴上</li>
</ul>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本清空指定目录下的文件内容</title>
    <url>/posts/3cbd56d/</url>
    <content><![CDATA[<p>想要情况指定文件夹下的所有文件的内容，但是保留文件应该怎么做呢？</p>
<p>通过编写 shell 脚本获取指定文件夹下所有 .log 结尾的文件，写入空数据，脚本如下<code>truncateFileContent.sh</code>：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取指定的文件夹路径</span></span><br><span class="line">dir=$1</span><br><span class="line"></span><br><span class="line">cd $dir</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">循环遍历目录下的所有文件</span></span><br><span class="line">for file in *.log</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">判断是否为文件，不是则跳过</span></span><br><span class="line">	if [ -f file ]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;&quot; &gt; $file</span><br><span class="line">	fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $dir + &quot;文件夹下的所有 .log 文件内容已清空！&quot;</span><br></pre></td></tr></table></figure></div>

<p>使用姿势：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sh ./truncateFileContent.sh /opt/data/test/</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM 练级攻略</title>
    <url>/posts/70f07f5e/</url>
    <content><![CDATA[<p>​	你想以最快的速度学习人类史上最好的文本编辑器 VIM 吗？你先得懂得如何在 VIM 幸存下来，然后一点一点地学习各种戏法。</p>
<p>​	Vim the Six Billion Dollar editor</p>
<blockquote>
<p>Better, Stronger, Faster.</p>
</blockquote>
<p>​	学习 Vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。</p>
<p>在开始学习以前，我需要给你一些<strong>警告</strong>：</p>
<ul>
<li>学习 Vim 在开始时是痛苦的。</li>
<li>需要时间</li>
<li>需要不断地练习，就像你学习一个乐器一样。</li>
<li>不用期望你能在 3 天内把 Vim 练得比别的编辑器更有效率。</li>
<li>事实上，你需要 2 周时间的苦练，而不是 3 天。</li>
</ul>
<p>本文目录主要以下面四个章节编写：</p>
<ul>
<li>存活</li>
<li>感觉良好</li>
<li>觉得更好，更强，更快</li>
<li>使用 VIM 的超能力</li>
</ul>
<p>当你看完这篇文章，你会成为一个 Vim 的 SuperStar。</p>
<h2 id="第一章-存活"><a href="#第一章-存活" class="headerlink" title="第一章 - 存活"></a>第一章 - 存活</h2><ol>
<li>安装 <a href="www.vim.org">Vim</a></li>
<li>启动 Vim</li>
<li><strong>什么也别干！</strong>请先阅读</li>
</ol>
<p>当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但是 Vim 不是这样的，请按照下面的命令操作：</p>
<ul>
<li>启动 Vim 后，Vim 在 <code>Normal</code> 模式下。</li>
<li>让我们进入 <code>Insert</code> 模式，请按下键 i。（Vim 左下角有一个 <code>--insert--</code> 字样，表示你可以以插入的方式输入了）</li>
<li>此时，你可以输入文本了，就像你用“记事本”一样。</li>
<li>如果你想返回 Normal 模式，请按<code>ESC</code>键。</li>
</ul>
<p>现在，你指定如何在 Insert 和 Normal 模式下切换了。下面是一些命令，可以让你在 Normal 模式下幸存下来：</p>
<blockquote>
<ul>
<li><code>i</code>-&gt; Insert 模式，按<code>ESC</code>回到 Normal 模式。</li>
<li><code>x</code>-&gt; 删除当前光标所在的一个字符。</li>
<li><code>:wq</code>-&gt; 保存 + 退出（<code>:w</code>保存，<code>:q</code>退出）</li>
<li><code>dd</code>-&gt; 删除当前行，并把删除的行存到<code>剪贴板</code>里</li>
<li><code>p</code>-&gt; 粘贴剪贴板</li>
</ul>
<p><strong>推荐</strong></p>
<ul>
<li><code>hjkl</code>-&gt; 你可以使用光标键(←↓↑→)，j 对应下箭头。</li>
<li><code>:help &lt;command&gt;</code>-&gt; 显示相关命令的帮助。你也可以就输入<code>:help</code>而不跟命令。</li>
</ul>
</blockquote>
<p>你能在 Vim 幸存下来只需要上述的 5 个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二章了。</p>
<p>但是，在你进入第二章时，需要再说一下 Normal 模式。在一般的编辑器下，当你需要 copy 一段文字的时候，你需要使用<code>Ctrl</code>键，比如：<code>Ctrl-c</code>。也就是说，Ctrl 键就像功能键一样，当你按下了功能键 Ctrl 后，c 就不在是 c 了，而就是一个命令或是一个快捷键了，<strong>在 VIM 的 Normal 模式下，所有的键就是功能键了。</strong></p>
<p>提示：</p>
<ul>
<li>下面的文字中，如果是<code>Ctrl-x</code>我会写成<code>&lt;C-x&gt;</code>。</li>
<li>以<code>:</code>开始的命令你需要输入<code>&lt;enter&gt;</code>回车，例如：如果我写成<code>:q</code>也就是说你要输入<code>:q&lt;enter&gt;</code>。</li>
</ul>
<h2 id="第二章-感觉良好"><a href="#第二章-感觉良好" class="headerlink" title="第二章 - 感觉良好"></a>第二章 - 感觉良好</h2><p>​	上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：所有的命令都需要在 Normal 模式下使用，如果你不知道现在在什么模式下，你就狂按几次<code>ESC</code>键。</p>
<p><strong>1. 各种插入模式</strong></p>
<blockquote>
<ul>
<li><code>a</code>-&gt; 在光标后插入</li>
<li><code>o</code>-&gt; 在当前行后插入一个新行</li>
<li><code>O</code>-&gt; 在当前行前插入一个新行</li>
<li><code>cw</code>-&gt; 替换从光标所在位置后到第一个单词结尾的字符</li>
</ul>
</blockquote>
<p><strong>2. 简单的移动光标</strong></p>
<blockquote>
<ul>
<li><code>0</code>-&gt; 数字零，当行头</li>
<li><code>^</code>-&gt; 到本行第一个不是 blank 字符的位置（所谓 blank 字符就是<code>空格</code>，<code>tab</code>，<code>换行</code>，<code>回车</code>等）</li>
<li><code>&amp;</code>-&gt; 到本行行尾</li>
<li><code>g_</code>-&gt; 到本行最后一个不是 blank 字符的位置</li>
<li><code>/pattern</code>-&gt; 搜索<code>pattern</code>的字符串（如果搜索出多个匹配，可按<code>n</code>键查找下一个，<code>N</code>键向上查找）</li>
</ul>
</blockquote>
<p><strong>3. 拷贝&#x2F;粘贴</strong>（p&#x2F;P 都可以，p 表示在当前位置之后，P 表示在当前位置之前）</p>
<blockquote>
<ul>
<li><code>p</code> -&gt; 粘贴</li>
<li><code>yy</code> -&gt; 拷贝当前行，相当于 <code>ddp</code></li>
</ul>
</blockquote>
<p><strong>4. Undo&#x2F;Redo</strong></p>
<blockquote>
<ul>
<li><code>u</code> -&gt; undo</li>
<li><code>&lt;Ctrl-r&gt;</code> -&gt; redo</li>
</ul>
</blockquote>
<p><strong>5. 打开&#x2F;保存&#x2F;退出&#x2F;改变文件</strong></p>
<blockquote>
<ul>
<li><code>:e &lt;path/to/file&gt;</code> -&gt; 打开一个文件</li>
<li><code>:w</code> -&gt; 保存</li>
<li><code>:saveas &lt;path/to/file&gt;</code> -&gt; 另存为 <code>&lt;path/to/file&gt;</code></li>
<li><code>:x</code>, <code>ZZ</code> 或 <code>:wq</code> -&gt; 保存并退出（<code>:x</code> 表示仅在需要时保存，<code>ZZ</code> 不需要输入冒号并回车）</li>
<li><code>q!</code> -&gt; 退出</li>
</ul>
</blockquote>
<p>花点时间熟悉下上面的命令，一旦你掌握了它们，你就几乎可以干其它编辑器都能干的事了。</p>
<h2 id="第三级-更好，更强，更快"><a href="#第三级-更好，更强，更快" class="headerlink" title="第三级 - 更好，更强，更快"></a>第三级 - 更好，更强，更快</h2><p>进行到这一步，恭喜你，你干的不错。到这我们可以开始一些更为有趣的事情了。在第三级，我们只谈那些和 vi 可以兼容的命令。</p>
<h3 id="更好"><a href="#更好" class="headerlink" title="更好"></a>更好</h3><p>下面，让我们看一下 Vim 是怎么重复自己的：</p>
<ol>
<li><code>.</code>-&gt; (小数点)可以重复上一次的命令</li>
<li><code>N&lt;command&gt;</code>-&gt; 重复某个命令 N 次</li>
</ol>
<p>下面是一个示例，打开一个文件你可以试试下面的命令：</p>
<blockquote>
<ul>
<li><code>2dd</code> -&gt; 删除 2 行</li>
<li><code>3p</code> -&gt; 粘贴文本 3 次</li>
<li><code>5idesu [ESC]</code> -&gt; 会写下”desu desu desu desu desu desu“</li>
<li><code>.</code> -&gt; 重复上一个命令 -&gt; <code>5idesu [ESC]</code></li>
<li><code>3.</code> -&gt; 重复 3 次“desu”（注意：不是 5 次，你看，Vim 多聪明啊）</li>
</ul>
</blockquote>
<h3 id="更强"><a href="#更强" class="headerlink" title="更强"></a>更强</h3><p>你要让你的光标移动更有效率，你一定要了解下面的这些命令，<strong>千万别跳过</strong>。</p>
<ol>
<li><p><code>NG</code> -&gt; 跳到第 N 行（注意命令中的 G 是大写，另一种方式，使用<code>:N</code>到第  N 行，如<code>:99</code>跳到第 99 行）</p>
</li>
<li><p><code>gg</code> -&gt; 跳到第一行（相当于<code>1G</code>或<code>:1</code>）</p>
</li>
<li><p><code>G</code> -&gt; 跳到最后一行</p>
</li>
<li><p>按单词移动：</p>
<blockquote>
<ol>
<li><code>w</code> -&gt; 到下一个单词的开头。</li>
<li><code>e</code> -&gt; 到下一个单词的结尾。</li>
</ol>
<blockquote>
<p>如果你认为单词是由 blank 字符分隔符，那么你需要使用大写的 <code>E</code>和<code>W</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/word_moves.jpg"
                      alt="word_moves"
                ></p>
</blockquote>
</blockquote>
</li>
</ol>
<p>下面说下最强的光标移动：</p>
<blockquote>
<ul>
<li><code>%</code>：匹配括号移动，包括<code>(</code>，<code>&#123;</code>，<code>[</code>。（注意：你需要把光标先移动到括号上）</li>
<li><code>*</code>和<code>#</code>：匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</li>
</ul>
</blockquote>
<p>相信我，上面这三个命令对程序员来说是相当强大的。</p>
<h3 id="更快"><a href="#更快" class="headerlink" title="更快"></a>更快</h3><p>你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来操作：</p>
<p><code>&lt;start position&gt;&lt;command&gt;&lt;end position&gt;</code></p>
<p>例如<code>0y$</code>命令意味着：</p>
<ul>
<li><code>0</code> -&gt; 先到行头</li>
<li><code>y</code> -&gt; 从这里开始拷贝</li>
<li><code>$</code> -&gt; 拷贝到本行最后一个字符</li>
</ul>
<p>你可以输入<code>ye</code>，从当前位置拷贝到本单词的最后一个字符。</p>
<p>你也可以输入<code>y2/foo</code>来拷贝 2 个“foo”之间的字符串。</p>
<p>还有很多命令并不一定要按 y 才会拷贝，下面的命令也会被拷贝：</p>
<ul>
<li><code>d</code>（删除）</li>
<li><code>v</code>（可视化的选择）</li>
<li><code>gU</code>（变大写）</li>
<li><code>gu</code>（变小写）</li>
<li>等等</li>
</ul>
<p>（可视化选择是一个很有意思的命令，你可以先按<code>v</code>，然后移动光标，你就会看到文本被选择，然后，你可能d，也可能y，也可以变大写等等）</p>
<h2 id="第四级-Vim-超能力"><a href="#第四级-Vim-超能力" class="headerlink" title="第四级 - Vim 超能力"></a>第四级 - Vim 超能力</h2><p>你只需要掌握前面的命令，你就可以很舒服的使用 Vim 了。但是，现在，我向你介绍的是 Vim 杀手级的功能。下面这些功能是我只用 Vim 的原因。</p>
<p><strong>在当前行上移动光标：<code>0</code> <code>^</code> <code>$</code> <code>f</code> <code>F</code> <code>t</code> <code>T</code> <code>,</code> <code>;</code></strong></p>
<blockquote>
<ul>
<li><p><code>0</code> -&gt; 到行头</p>
</li>
<li><p><code>^</code> -&gt; 到本行的第一个非 blank 字符</p>
</li>
<li><p><code>$</code> -&gt; 到行尾</p>
</li>
<li><p><code>g_</code> -&gt; 到本行最后一个不是 blank 字符的位置</p>
</li>
<li><p><code>fa</code> -&gt; 到下一个为 a 的字符处，你也可以 fs 到下一个为 s 的字符处。</p>
</li>
<li><p><code>t,</code> -&gt; 到逗号前的第一个字符。逗号可以变成其他字符。</p>
</li>
<li><p><code>3fa</code> -&gt; 在当前行查找第三个出现的 a。</p>
</li>
<li><p><code>F</code> 和 <code>T</code> -&gt; 和 <code>f</code> 和 <code>t</code> 一样，只不过是相反方向。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/line_moves.jpg"
                      alt="line_moves"
                ></p>
</li>
</ul>
</blockquote>
<p>还有一个很有用的命令是<code>dt&quot;</code> -&gt; 删除所有的内容，直到遇到双引号<code>&quot;</code>。</p>
<h3 id="区域选择a或i"><a href="#区域选择a或i" class="headerlink" title="区域选择&lt;action&gt;a&lt;object&gt;或&lt;action&gt;i&lt;object&gt;"></a>区域选择<code>&lt;action&gt;a&lt;object&gt;</code>或<code>&lt;action&gt;i&lt;object&gt;</code></h3><p>在 Visual 模式下，这些命令很强大，其命令格式为：<code>&lt;action&gt;a&lt;object&gt;</code>和<code>&lt;action&gt;i&lt;object&gt;</code></p>
<ul>
<li>action 可以是任何命令，如<code>d</code>（删除），<code>y</code>（拷贝），<code>v</code>（可以视模式选择）。</li>
<li>object 可能是：<code>w</code>一个单词，<code>W</code>一个以空格为分隔的单词，<code>s</code>一个句字，<code>p</code>一个段落。也可以是一个特别的字符：<code>&quot;、</code> <code>&#39;、</code> <code>)、</code> <code>&#125;、</code> <code>]。</code></li>
</ul>
<p>假设你有一个字符串<code>(map (+) (&quot;foo&quot;))</code>，而光标键在第一个<code>o</code>的位置。</p>
<blockquote>
<ul>
<li><p><code>vi&quot;</code> -&gt; 会选择 <code>foo</code>.</p>
</li>
<li><p><code>va&quot;</code> -&gt; 会选择 <code>&quot;foo&quot;</code>.</p>
</li>
<li><p><code>vi)</code> -&gt; 会选择 <code>&quot;foo&quot;</code>.</p>
</li>
<li><p><code>va)</code> -&gt; 会选择 <code>(&quot;foo&quot;)</code>.</p>
</li>
<li><p><code>v2i)</code> -&gt; 会选择 <code>map (+) (&quot;foo&quot;)</code>.</p>
</li>
<li><p><code>v2a)</code> -&gt; 会选择 <code>(map (+) (&quot;foo&quot;))</code>.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/textobjects.png"
                      alt="textobjects"
                ></p>
</li>
</ul>
</blockquote>
<h3 id="块操作："><a href="#块操作：" class="headerlink" title="块操作：&lt;C-v&gt;"></a>块操作：<code>&lt;C-v&gt;</code></h3><p>块操作，典型的操作：<code>0 &lt;C-v&gt; &lt;C-d&gt; I-- [ESC]</code></p>
<ul>
<li><p><code>^</code> -&gt; 到行头</p>
</li>
<li><p><code>&lt;C-v&gt;</code> -&gt; 开始块操作</p>
</li>
<li><p><code>&lt;C-d&gt;</code> -&gt; 向下移动（你也可以使用<code>hjkl</code>来移动光标，或是使用<code>%</code>，或是别的）</p>
</li>
<li><p><code>I-- [ESC]</code> -&gt; I 是插入，插入“<code>--</code>”，按 ESC 键来为每一行生效。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/rectangular-blocks.gif"
                      alt="rectangular-blocks"
                ></p>
</li>
</ul>
<p>在 Windows 下的 Vim，你需要使用<code>&lt;C-q&gt;</code>而不是<code>&lt;C-v&gt;</code>，<code>&lt;C-v&gt;</code>是拷贝剪贴板。</p>
<h3 id="自动提示：和"><a href="#自动提示：和" class="headerlink" title="自动提示：&lt;C-n&gt;和&lt;C-p&gt;"></a>自动提示：<code>&lt;C-n&gt;</code>和<code>&lt;C-p&gt;</code></h3><p>在 Insert 模式下，你可以输入一个词的开头，然后按<code>&lt;C-p&gt;或是&lt;C-n&gt;，自动补齐功能就出现了...</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/completion.gif"
                      alt="completion"
                ></p>
<h3 id="宏录制：qa操作序列q-a，"><a href="#宏录制：qa操作序列q-a，" class="headerlink" title="宏录制：qa操作序列q,@a，@@"></a>宏录制：<code>qa</code>操作序列<code>q</code>,<code>@a</code>，<code>@@</code></h3><ul>
<li><code>qa</code> 把你的操作记录在寄存器<code>a。</code></li>
<li>于是<code>@a</code>会 replay 被录制的宏。</li>
<li><code>@@</code>是一个快捷键用来 replay 最新录制的宏。</li>
</ul>
<blockquote>
<p><strong>示例</strong></p>
<p>在一个只有一行且这一行只有“1”的文本中，键入如下命令：</p>
<ul>
<li><code>qaYp&lt;C-a&gt;q</code> -&gt; <ul>
<li><code>qa</code> 开始录制</li>
<li><code>Yp</code> 复制行</li>
<li><code>&lt;C-a&gt;</code>增加</li>
<li><code>q</code>停止录制</li>
</ul>
</li>
<li><code>@a</code> -&gt; 在 1 下面写下 2</li>
<li><code>@@</code> -&gt; 在 2 正面写下 3</li>
<li>现在做 <code>100@@</code>会创建新的 100 行，并把数据增加到 103.</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/macros.gif"
                      alt="macros"
                ></p>
</blockquote>
<h3 id="可视化选择：v，V，"><a href="#可视化选择：v，V，" class="headerlink" title="可视化选择：v，V，&lt;C-v&gt;"></a>可视化选择：<code>v</code>，<code>V</code>，<code>&lt;C-v&gt;</code></h3><p>前面，我们看到了<code>&lt;C-v&gt;</code>的示例（在 Windows 下应该是<code>&lt;C-q&gt;</code>），我们可以使用<code>v</code>和<code>V</code>。一旦被选好了，你可以做下面的事：</p>
<ul>
<li><code>J</code> -&gt; 把所有的行连接起来（变成一行）</li>
<li><code>&lt;</code>或<code>&gt;</code> -&gt; 左右缩进</li>
<li><code>=</code> -&gt; 自动给缩进</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/autoindent.gif"
                      alt="autoindent"
                ></p>
<p>在所有被选择的行后加上点东西：</p>
<ul>
<li><code>&lt;C-v&gt;</code></li>
<li>选中相关的行（可使用<code>j</code>或<code>&lt;C-d&gt;</code>或是<code>/pattern</code>或是<code>%</code>等）</li>
<li><code>$</code>到行最后</li>
<li><code>A</code>，输入字符串，按<code>ESC</code>。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/append-to-many-lines.gif"
                      alt="append-to-many-lines"
                ></p>
<h3 id="分屏：-split和vsplit"><a href="#分屏：-split和vsplit" class="headerlink" title="分屏：:split和vsplit"></a>分屏：<code>:split</code>和<code>vsplit</code></h3><p>下面是主要的命令，你可以使用 Vim 的帮助<code>:help split</code>。</p>
<blockquote>
<ul>
<li><code>:split</code> -&gt; 创建分屏（<code>:vsplit</code>创建垂直分屏）</li>
<li><code>&lt;C-w&gt;&lt;dir&gt;</code>：dir 就是方向，可以是<code>hjkl</code>中的一个，其用来切换分屏。</li>
<li><code>&lt;C-w&gt;_</code>（或<code>&lt;C-w&gt;|</code>）：最大化尺寸（<code>&lt;C-w&gt;\</code>垂直分屏）</li>
<li><code>&lt;C-w&gt;+</code>（或<code>&lt;C-w&gt;-</code>）：增加尺寸</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../images/articles/vim/split.gif"
                      alt="split"
                ></p>
</blockquote>
<p><strong>文章转载地址</strong>：<a class="link"   href="https://coolshell.cn/articles/5426.html" >简明VIM练级攻略 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>原文地址</strong>：<a class="link"   href="https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" >Learn Vim Progressively <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 命令大全，学会了你就离 VIM 大神不远了！</title>
    <url>/posts/9a404bfa/</url>
    <content><![CDATA[<p>​	日常开发过程中，免不了需要键盘、鼠标（触摸板）来回切换，本人有点懒哈哈哈！想着尝试学习 VIM，这样在开发过程中就可以双手不离键盘就可以操控一切了，这种感觉想想都是太棒了！期待早日熟悉 VIM 命令操作。</p>
<p>​	对于未使用过  VIM 的朋友来说，可能无法体会到这种感觉。由于学习使用 VIM 有一定的学习成本，只有做到非常熟练的程度才能感受到它带来的快捷。</p>
<p>​	这里我就记录日常过程中有使用过的 VIM 命令，建议有需要学习 VIM 的朋友，可以按照文章进行匹配搜索想要查看的命令。记得要多多尝试哦，加油！！！</p>
<h3 id="1-VIM-模式"><a href="#1-VIM-模式" class="headerlink" title="1. VIM 模式"></a>1. VIM 模式</h3><p>​	VIM 模式分为三种，**正常模式(NORMAL)<strong>、</strong>插入模式(INSERT)<strong>、</strong>可视模式(VISUAL)**。</p>
<blockquote>
<p><strong>正常模式（NORMAL）</strong>：按<code>ESC</code>或<code>Ctrl+[</code>进入，左下角显示文件名或为空。</p>
<p><strong>插入模式（INSERT）</strong>：按<code>i</code>进入，左下角显示<code>--INSERT--</code></p>
<p><strong>可视模式（VISUAL）</strong>：按<code>v</code>进入，左下角显示<code>--VISUAL--</code></p>
</blockquote>
<h3 id="2-打开文件"><a href="#2-打开文件" class="headerlink" title="2. 打开文件"></a>2. 打开文件</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开单个文件</span></span><br><span class="line">vim file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同时打开多个文件</span></span><br><span class="line">vim file1 file2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 Vim 窗口中打开一个新文件</span></span><br><span class="line">:open file</span><br><span class="line"></span><br><span class="line">【示例】</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前打开了 test1，做了一些编辑没保存</span></span><br><span class="line">:open!	# 放弃这些修改，并重新打开文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以只读形式打开文件，但是仍然可以使用 :wq! 写入</span></span><br><span class="line">vim -R file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制性关闭修改功能，无法使用 :wq! 写入</span></span><br><span class="line">vim -M file</span><br></pre></td></tr></table></figure></div>

<h3 id="3-插入命令"><a href="#3-插入命令" class="headerlink" title="3. 插入命令"></a>3. 插入命令</h3><p>进入插入模块有多种方式，<code>i</code>、<code>I</code>、<code>a</code>、<code>A</code>、<code>o</code>、<code>O</code>。</p>
<blockquote>
<p><strong>i</strong>：在当前位置前插入</p>
<p><strong>I</strong>：在当前位置行首插入</p>
<p><strong>a</strong>：在当前位置后插入</p>
<p><strong>A</strong>：在当前位置行尾插入</p>
<p><strong>o</strong>：在当前行之后插入一行</p>
<p><strong>O</strong>：在当前行之前插入一行</p>
</blockquote>
<h3 id="4-查找命令"><a href="#4-查找命令" class="headerlink" title="4. 查找命令"></a>4. 查找命令</h3><h4 id="简单查找"><a href="#简单查找" class="headerlink" title="简单查找"></a>简单查找</h4><blockquote>
<p><strong>&#x2F;text</strong>：查找 text，按<code>n</code>键查找下一个，按<code>N</code>键查找前一个。</p>
<p><strong>?text</strong>：查找 text，反向查找，按<code>n</code>键查找下一个，按<code>N</code>键查找前一个</p>
<p>:set ignorecase	# 忽略大小写的查找</p>
<p>:set noignorecase	# 不忽略大小写的查找</p>
</blockquote>
<h4 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h4><blockquote>
<p><code>*</code>：向后（下）寻找游标所在处的单词</p>
<p><code>#</code>：向前（上）寻找游标所在处的单词</p>
</blockquote>
<h4 id="精准查找：匹配单词查找"><a href="#精准查找：匹配单词查找" class="headerlink" title="精准查找：匹配单词查找"></a>精准查找：匹配单词查找</h4><p>如果文本中有如下三个单词</p>
<p><code>hello</code>、<code>helloworld</code>、<code>helloJava</code></p>
<p>那按照正常的 <code>/hello</code>方式查找，这三个单词都能匹配到。</p>
<p>可以按如下方式进行精准查找</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/hello\&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="精准查找：匹配行首、行末"><a href="#精准查找：匹配行首、行末" class="headerlink" title="精准查找：匹配行首、行末"></a>精准查找：匹配行首、行末</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello 位于行首</span></span><br><span class="line">/^hello</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">world 位于行末</span></span><br><span class="line"><span class="meta prompt_">/world$</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5-替换命令"><a href="#5-替换命令" class="headerlink" title="5. 替换命令"></a>5. 替换命令</h3><blockquote>
<p><code>~</code>：反转游标字母大小写</p>
<p><code>r&lt;字母&gt;</code>：将当前字符替换为所写字母</p>
<p><code>R&lt;字母&gt;&lt;字母&gt;</code>：连续替换字母</p>
<p><code>cc</code>：替换整行（删除当前行，并在下一行插入）</p>
<p><code>cw</code>：替换一个单词（删除一个单词，进入插入模式），前提是游标处于单词第一个字母（用<code>b</code>定位到单词最前面）</p>
<p><code>C</code>：（大写 C）替换至行尾，删除游标到行尾的内容</p>
<p><code>:s/old/new</code>：用 old 替换 new，替换<strong>当前行</strong>的第一个匹配</p>
<p><code>:s/old/new/g</code>：用 old 替换 new，替换<strong>当前行</strong>的所有匹配</p>
<p><code>:%s/old/new</code>：用 old 替换 new，替换<strong>所有行</strong>的第一个匹配</p>
<p><code>:%s/old/new/g</code>：用 old 替换 new，替换<strong>整个文件</strong>的所有匹配</p>
<p><code>:1,5 s/^/	/g</code>：在第 1 行至第 5 行每行前面加一个空格，用于缩进。</p>
<p><code>ddp</code>：交换光标所在行和其下紧邻的一行。<code>dd</code>会删除当前行并复制，<code>p</code>粘贴</p>
</blockquote>
<h3 id="6-撤销和重做"><a href="#6-撤销和重做" class="headerlink" title="6. 撤销和重做"></a>6. 撤销和重做</h3><blockquote>
<p><code>u</code>：撤销（Undo）</p>
<p><code>U</code>：撤销对整行的操作</p>
<p><code>Ctrl + r</code>：反撤销</p>
</blockquote>
<h3 id="7-删除命令"><a href="#7-删除命令" class="headerlink" title="7. 删除命令"></a>7. 删除命令</h3><p>​	Vim 其实没有单纯的删除命令，你可以理解为<strong>剪切</strong>更加准确。</p>
<p><strong>以字符为单位删除</strong></p>
<blockquote>
<p><code>x</code>：删除当前字符</p>
<p><code>5x</code>：删除当前字符 5 次</p>
<p><code>X</code>：删除当前字符的前一个字符</p>
<p><code>5X</code>：删除当前光标向前 5 个字符</p>
<p><code>dl</code>：删除当前字符，dl&#x3D;x</p>
<p><code>dh</code>：删除前一个字符，dh&#x3D;X</p>
<p><code>D</code>：删除当前字符至行尾，D&#x3D;d$</p>
<p><code>d$</code>：删除当前字符至<strong>行尾</strong></p>
<p><code>d^</code>：删除当前字符之前至<strong>行首</strong>所有内容</p>
</blockquote>
<p><strong>以单词为单位删除</strong></p>
<blockquote>
<p><code>dw</code>：删除当前字符到单词尾</p>
<p><code>daw</code>：删除当前字符所在单词</p>
</blockquote>
<p><strong>以行为单位删除</strong></p>
<blockquote>
<p><code>dd</code>：删除当前行</p>
<p><code>dj</code>：删除下一行</p>
<p><code>dk</code>：删除上一行</p>
<p><code>dgg</code>：删除当前行至文档首部</p>
<p><code>d1G</code>：删除当前行至文档首部</p>
<p><code>dG</code>：删除当前行至文档尾部</p>
<p><code>10d</code>：删除当前行开始的 10 行</p>
<p><code>:1,10d</code>：删除 1- 10 行</p>
<p><code>10,$d</code>：删除第 10 行及之后所有行</p>
<p><code>1,$d</code>：删除所有行</p>
<p><code>J</code>：合并两行</p>
</blockquote>
<h3 id="8-复制粘贴"><a href="#8-复制粘贴" class="headerlink" title="8. 复制粘贴"></a>8. 复制粘贴</h3><p>在普通模式下使用<code>y</code>复制</p>
<blockquote>
<p><code>yy</code>：复制游标所在的整行</p>
<p><code>y^</code>：复制至行首，或<code>y0</code>，不包含光标所在处字符</p>
<p><code>y$</code>：复制至行尾。含光标所在处字符</p>
<p><code>yw</code>：复制一个单词</p>
<p><code>y2w</code>：复制两个单词</p>
<p><code>yG</code>：复制至文本末</p>
<p><code>y1G</code>：复制至文件开头</p>
</blockquote>
<p>普通模式中使用<code>p</code>粘贴</p>
<blockquote>
<p><code>p</code>：代表粘贴至光标后（下边，右边）</p>
<p><code>P</code>：代表粘贴至光标前（上边、左边）</p>
</blockquote>
<h3 id="9-剪切粘贴"><a href="#9-剪切粘贴" class="headerlink" title="9. 剪切粘贴"></a>9. 剪切粘贴</h3><blockquote>
<p><code>dd</code>：剪切命令，剪切当前行</p>
<p><code>ddp</code>：剪切当前行并粘贴，可实现当前行与下一行调换位置</p>
</blockquote>
<h3 id="10-退出保存"><a href="#10-退出保存" class="headerlink" title="10. 退出保存"></a>10. 退出保存</h3><blockquote>
<p><code>:wq</code>：保存并退出</p>
<p><code>ZZ</code>：保存并退出</p>
<p><code>:q!</code>：强制退出并放弃所有更改</p>
<p><code>:e!</code>：放弃所有修改，并重新打开原来文件</p>
<p><code>:sav(eas) new.txt</code>：另存为一个新文件，退出原文件的编辑且不会保存</p>
<p><code>:f(ile) new.txt</code>：新开一个文件，并不会保存，退出原文件的编辑且不会保存</p>
</blockquote>
<h3 id="11-移动命令"><a href="#11-移动命令" class="headerlink" title="11. 移动命令"></a>11. 移动命令</h3><p><strong>上下左右</strong></p>
<blockquote>
<p><code>hjkl</code>：左、下、上、右移动一个字符</p>
</blockquote>
<p><strong>以单词为单位移动</strong></p>
<blockquote>
<p><code>w</code>：向前移动一个单词（光标停留在单词首部）</p>
<p><code>b</code>：向后移动一个单词（光标停留在单词首部）</p>
<p><code>e</code>：向前移动一个单词（光标停留在单词尾部）</p>
<p><code>ge</code>：向后移动一个单词（光标停留在单词尾部）</p>
</blockquote>
<p><strong>以句为单位移动</strong></p>
<blockquote>
<p><code>(</code>：移动到句首</p>
<p><code>)</code>：移动到句尾</p>
</blockquote>
<p><strong>跳转到文件的首尾</strong></p>
<blockquote>
<p><code>gg</code>：移动到文件头</p>
<p><code>G</code>：移动到文件尾</p>
</blockquote>
<p><strong>其他移动方法</strong></p>
<blockquote>
<p><code>^</code>：移动到本行第一个非空白字符上</p>
<p><code>0</code>：移动到本行第一个字符上（可以是空格）</p>
</blockquote>
<h3 id="12-排版功能"><a href="#12-排版功能" class="headerlink" title="12. 排版功能"></a>12. 排版功能</h3><p><strong>缩进</strong></p>
<blockquote>
<p><code>:set shiftwidth?</code>：查看缩进值</p>
<p><code>:set shiftwidth=4</code>：设置缩进值为 4</p>
<p><code>&gt;&gt;</code>：向右缩进</p>
<p><code>&lt;&lt;</code>：向左缩进</p>
</blockquote>
<h3 id="13-注释命令"><a href="#13-注释命令" class="headerlink" title="13. 注释命令"></a>13. 注释命令</h3><p><strong>多行注释</strong></p>
<blockquote>
<p>进入命令行模式，按<code>ctrl + v</code>进入 <code>VISUAL BLOCK</code>模式，然后按<code>j</code>或<code>k</code>选中多行</p>
<p>按大写字母<code>I</code>，再插入注释符<code>//</code></p>
<p>按<code>ESC</code>键就会把所有选中的行注释了</p>
</blockquote>
<p><strong>取消多行注释</strong></p>
<blockquote>
<p>进入命令行模式，按<code>ctrl + v</code>进入<code>VISUAL BLOCK</code>模式，按字母<code>l</code>横向选中列的个数</p>
<p>按字母<code>j</code>或<code>k</code>选中注释符合</p>
<p>按<code>d</code>键就可以取消全部注释了</p>
</blockquote>
<p><strong>复杂注释</strong></p>
<blockquote>
<p><code>:1,3 s/^/#/g</code>：注释第1 - 3 行</p>
<p><code>:1,3 s/^#//g</code>：取消第1 - 3 行的注释</p>
<p><code>:1,$ s/^/#/g</code>：注释整个文档</p>
<p><code>:1,$ s/^$//g</code>：取消整个文档注释</p>
<p><code>:%s/^/#/g</code>：注释整个文档</p>
<p><code>%s/^#//g</code>：取消注释整个文档</p>
</blockquote>
<h3 id="14-调整视野查看"><a href="#14-调整视野查看" class="headerlink" title="14. 调整视野查看"></a>14. 调整视野查看</h3><blockquote>
<p><code>zz</code>：把当前行置为屏幕正中央</p>
<p><code>zt</code>：把当前行置为屏幕顶端</p>
<p><code>zb</code>：把当前行置为屏幕底端</p>
<p><code>ctrl + e</code>：向下滚动一行</p>
<p><code>ctrl + y</code>：向上滚动一行</p>
<p><code>ctrl + d</code>：向下滚动半屏</p>
<p><code>ctrl + u</code>：向上滚动半屏</p>
<p><code>ctrl + f</code>：向下滚动一屏</p>
<p><code>ctrl + b</code>：向上滚动一屏</p>
</blockquote>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
